// Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
// Available under the MIT License - see LICENSE.txt for details.

// This file was generated by `generate_verilog.py`.

`timescale 1ns/1ps

module xormix32_tb;
    
    // configuration
    localparam streams = 4;
    localparam results = 100;
    localparam [31 : 0] seed_x =
        32'hdf2c403b;
    localparam [32 * streams - 1 : 0] seed_y =
        128'ha9140006e47066dd25e5a545abac0809;
    
    // reference result
    localparam [32 * streams * results - 1 : 0] ref_result = {
        128'h58196a68b24d628aa1172ca3c4a881c7,
        128'hda29d519d0f02195380e751ca65805eb,
        128'hb5f11b45c4da159b4898cec274af8d1e,
        128'hcb5c6cea3a926c9aac69685a6672704c,
        128'h44abb36e5ea9edad7aa1f706de3bac85,
        128'hc31a44f52643d1f30cf362b78712f55f,
        128'h326fcc1e4f1d4508736fd4ec78c9f4e7,
        128'hf12a8e4ce2c22b85f97082aa29210d2b,
        128'h0e1289ee8f38605daaf141676dbee3af,
        128'hb4123a34a06f8c0d189c7d933c2419d7,
        128'h7cd1377c1a5c00a5b33c1a2de61ec116,
        128'hfd2c88ec407a8a2b9e08e4678ceb49e6,
        128'h0a28adaea8791b525ed06395d034317f,
        128'h6faa6f6d6cb4174754fa414136c3ac20,
        128'ha6a625142f49201b30d6e7392afd37d8,
        128'hf75a917add3803b7e8d597cd499bd161,
        128'h47ed46deeb2ded7e23c089c62a7a118b,
        128'haaf6069bcb10e8378b862b5914f6c816,
        128'h980c685bc262b3143f379b2abe52706f,
        128'h36c33d0990446cbc2fe209c78ffba7d9,
        128'h8cd5c8f72b03d2e582626dbe140bc4e5,
        128'h9c3dbec374715279473ed6dda9bf191a,
        128'hb665ce1d673aee7c9ccfb9db358080e9,
        128'hdaa19bb0b99e1e06c695b99369e9ec6b,
        128'h8f31ff588b9d4340a446151d6ff92be4,
        128'hbb6c2228bd3a9834625dc2f2e601dd0e,
        128'h488590b842acbbcf337287a8d3d0c469,
        128'h6be720f08f29182c3f689d2e88cba34d,
        128'hfb80ae5ae5a46e5e4f8393a5411b9aa8,
        128'h31222e4c4d2c8bf52c33b28624fb6f21,
        128'ha98039f8a9e7dcf92eea74fc2d7fc206,
        128'h8eaab391d604fb20e0feb4af62a3cb2d,
        128'hc6cd8de7e92fca18d44cc106671c93ef,
        128'h45d27648f4ee142bc9c52a2d1182e7a4,
        128'hec7c67ec0f889ed96725657d09373df1,
        128'h26a421fea6e2893883e6533da96f4d90,
        128'h384b5f5670b448eaa25a3a123483f5bc,
        128'ha17fd3df45950367c133d31f85c16dc9,
        128'hd5a181b801d0d9df1ea10d9bae411ec4,
        128'h3fa947b69f79b1357b327f629b8e4fb6,
        128'h3b9ea408e4f36c56905d9aee1ab74176,
        128'h755673eceaf465918b3a5ad7393b59ad,
        128'he98e74bc5c7e8438a796cf6ca7ef4042,
        128'h244fa6a14e131c924817b559f4b4cb42,
        128'hbfcf4cbb7a37f7b3b33d02f2fdf65be2,
        128'he34c876e932236b7a1752d973b8e4feb,
        128'h993c3bb649c6117fd857242dd1cab1e5,
        128'hd288d4e1b5fa77e8bf08b99cd5d60541,
        128'h65010ab8d4d2a3315cea4acde74170ef,
        128'h313e1d51cfabc221b4275d7b2d466e13,
        128'h1c59333e37b6dd7cc09f6b8431f603b6,
        128'hc77da79b04e7cc4dc17239ea3c4b722c,
        128'ha1c44078a37a045698d7e467a279b76b,
        128'hb28975e63f369f6e24a5f7af41b39fcf,
        128'h4a575895e5ba4787f5c49d693596a70c,
        128'h6aa189c5a005ef500609f3fc6be3de0e,
        128'h4e42ae569d001516151d3f6c5582a446,
        128'h11be5a7930b0535c6bd0fafb87d0743e,
        128'hbbab43e6beb0a91c57095085e230bd66,
        128'h1214dddf53e4c527b83ec2476286150b,
        128'h737cc97e2856a0cc3ce7e0c93a4e0cff,
        128'h5673be7454e19d9643d18dba31980d15,
        128'he5a68648373f8f15d221d77b00b8b5cb,
        128'hd83ef3a4a3c0f855df41bf2045b7b378,
        128'h20afe514d72d3eb4c5405f384d8e6dff,
        128'h554421f0ff02e3dd719d2e9a0d9fd47b,
        128'hd7be710505b0f867a350b7f386307043,
        128'h67051639d07c5af629b320c21001d86f,
        128'he930602e95e4d1ccb9958fa06104ffaa,
        128'hdb02c35eaa725b30eae46b291a0abf45,
        128'h017ddee149ebb857a1124197fed8e778,
        128'hfe2b27730ad7ef1f1679078856987974,
        128'h9dfb9b05cce1f50d9e9dbeb31a1b8181,
        128'h9b024c56b43cac94e84abdf41d688efb,
        128'hb66895e8955de711d042b5eb661de549,
        128'h19672821db4fa5db6dd332e938cee06d,
        128'h1f11cfec4276ceb6891447527fb90354,
        128'h6221fa516c183cea983e750e1e286090,
        128'hc4cead2f47f6148899c272e090abc2ff,
        128'hc9706d0204f4363a5aa46c6c3ecdb444,
        128'h98a857f5d2558a398d92340ad3e940ef,
        128'h5411027b8524d3f831cecdd29cc24aa1,
        128'h36a06b3754a8184444d6632b577c58f6,
        128'hbe82244349da021acb6496e8baca5de9,
        128'h2aa6d981ef2824d4c6b16808b2a1dcec,
        128'hbf0777e99668e7f3738c429a0a41c1c2,
        128'hd9bcef901d5cf5a156cc6be4a4e99b48,
        128'h51f4cff5588773669d1457b79f694739,
        128'ha062ad1d319060e207ca239034fb4da7,
        128'h3bd77b3f225f45a3cca9557980b06b25,
        128'h90a5b0070b1d74a192fa0d3ca1b3ec64,
        128'h041187881272d3ec30ac445b73ce160d,
        128'h537b49cb65b06f10b26b59715ab21278,
        128'h75a3fb5d9a50ec995e6c1ad163f72362,
        128'h16fc58f39bc40eb18a722ce8c7b85af9,
        128'hfc26409d3635a017276588f9bec4ed3b,
        128'h44b21fc9409b9a42e28ff6f7c4d46807,
        128'h5cfdf623fa4b0f48d477a2bac61cd103,
        128'h72f2ab4fbd5698b41657384cfb444495,
        128'ha9140006e47066dd25e5a545abac0809
    };
    
    // DUT signals
    reg clk = 0;
    reg rst;
    reg enable;
    wire [32 * streams - 1 : 0] result;
    
    // flag to stop simulation
    integer run = 1;
    
    // error counter
    integer errors = 0;
    
    // DUT
    xormix32 #(
        .streams(streams)
    ) inst_xormix (
        .clk(clk),
        .rst(rst),
        .seed_x(seed_x),
        .seed_y(seed_y),
        .enable(enable),
        .result(result)
    );
    
    // clock process
    initial begin
        while (run == 1) begin
            clk = 1'b1;
            #5;
            clk = 1'b0;
            #5;
        end
    end
    
    integer i;
    
    // input/output process
    initial begin
        @(posedge clk);
        rst <= 1'b1;
        enable <= 1'b0;
        @(posedge clk);
        rst <= 1'b0;
        enable <= 1'b1;
        for (i = 0; i < results; i = i + 1) begin
            @(posedge clk);
            if (result !== ref_result[32 * streams * i +: 32 * streams]) begin
                $display("Incorrect result for i=%d", i);
                errors = errors + 1;
            end
        end
        $display("Test complete, number of errors: %d", errors);
        run <= 0;
    end
    
endmodule
