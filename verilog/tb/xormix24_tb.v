// Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
// Available under the MIT License - see LICENSE.txt for details.

// This file was generated by `generate_verilog.py`.

`timescale 1ns/1ps

module xormix24_tb;
    
    // configuration
    localparam streams = 4;
    localparam results = 100;
    localparam [23 : 0] seed_x =
        24'h1244da;
    localparam [24 * streams - 1 : 0] seed_y =
        96'h09e3cd3f2a82eedcfdda1a8e;
    
    // reference result
    localparam [24 * streams * results - 1 : 0] ref_result = {
        96'h995a1972ed2e1a603f5cec46,
        96'h0ec7e3c689a0f28d7f1f205f,
        96'hf7f2f0a3afbbc8cd5c9d9a59,
        96'h39aa0a84b9ee19798475b839,
        96'h6438734e8f4669e5885d3b1c,
        96'h7c7fb732a1d0f133a63477d7,
        96'h6b9f89d53a55ce73401ae895,
        96'h2e55b6bfa121a6e5ad5590d5,
        96'hcb79203fefd50f609449d6e1,
        96'he46d87410f91c0cfbbfeb763,
        96'h9b38950a733f1ebf41dfc7e9,
        96'h6db259a9a7d82e177d34abdc,
        96'h19762df46da5d81984b4457c,
        96'h16c236b125284ab0aeab01b4,
        96'h42185c768dbff5516e317fd0,
        96'ha814a760607dbc4530592e6d,
        96'hec7ce310797ae94a3d2d161e,
        96'hd0edbdf5c07ffe2225904b1c,
        96'h194cc566ecd509f99496caa6,
        96'h9083f22e75de481716b87bdd,
        96'h557e7025427e38c3fb80a7f2,
        96'h3cb8550d177d3ebacdc5e24b,
        96'he52f404a04890b306ddd7e73,
        96'h7b6787457f38c25e4c93d4f2,
        96'h90f3597ed70edf03a3f1b98f,
        96'h7641437fc0d1469bcc652123,
        96'he9dfe14bf62909d46736ad1f,
        96'h407fa1bb3137bd2be8cb7f82,
        96'he43c1b066a618f649c46c473,
        96'h6947172febe065929b30828c,
        96'h98cebd98ad755cf9bf449f63,
        96'he969f41c0afcc073027fa89a,
        96'hfe89e1d2adbc28fb4e937f95,
        96'hd9170599239d592d1581a424,
        96'hf2390b97cc64db08e7c91668,
        96'hc3378ac57797c8652672fe5d,
        96'h9bb0e8079d36bd19d889b8b7,
        96'h2eae39d09e2d5351ff4320c1,
        96'hbc3fdf511d993cb000de554f,
        96'h23c4433d921492a58a2a991b,
        96'he68a2ac1756765bb10122e04,
        96'had3ec9656f14a1d289e110d1,
        96'h69f1abf94c15a845b2a2a8cd,
        96'heb7ca1a7be421ff488658f73,
        96'hc7bab3a1b657556bfd54927d,
        96'hba6e514df6d227b7da609b5c,
        96'h9661b1dc8e7daac83afc7634,
        96'hc102264cde60fe0f5c4ce42e,
        96'h4136db281444000bf52f4b5b,
        96'hc3d7da7ba7eb8c723bfd9b5b,
        96'h1dfe633de6e9f6dd9e56a6a4,
        96'hf4b9ff4db84ec70029bae036,
        96'h7d9dac9642b4f7d5be35222f,
        96'h82872b68219b5cdb1a5ed197,
        96'h082fbba2e2a52cd06c1b6216,
        96'hfec1d48518b2d48926407014,
        96'hc9ecb099f4be932b2958a8cd,
        96'h9d8d6046b24b8a9d84ec9713,
        96'h0cca658627bf270e5fe1f7a6,
        96'ha5e71629d04f98b6234b9960,
        96'hff8eb0690a7e40c1a0b4fe8a,
        96'h76d1dbbda9c21651a387d2fe,
        96'h21881de045fef344ae4c2d39,
        96'h57798e6698f2c31b8357157c,
        96'h744dfdb5a23bccc0c65fddf6,
        96'h2a7c88a23bb57af6174e3eed,
        96'hcb5e4f6b0d766a994e0d23aa,
        96'h3631e17bff11d45fbc4acba4,
        96'h59d2477cd8b9f17f23face77,
        96'ha8727fba135343be9f096848,
        96'h4c8653637cae35f20bf3500b,
        96'hfc4cc2b0429581ab3c324692,
        96'h312a18ab2e8b4887c6c82175,
        96'h3f6ead1327f8426f65dd561c,
        96'h4bc53f6d232d946786fc2a91,
        96'h63c1cf5d3ae6a96a792f0812,
        96'hf69923ea35c2887c27353f16,
        96'h56e9b02caf537a38ef5c1f21,
        96'hc8e68454e45e6b0fe2284b17,
        96'h4918d606a2f1563e084feab4,
        96'hc990155c35b14d592d8c978d,
        96'hecf552732c91d93e079e36fa,
        96'hc754ee93942c50e2ea353974,
        96'hded7412168edcb4f8e717fdf,
        96'hd4342ffdc443187d6a014194,
        96'h7d10c1ac68c47923cdab93ce,
        96'hbf706eae0db8ce0eac28f083,
        96'hcd880216b4474042918825b4,
        96'h616bf5ca23049e6930fa6d9b,
        96'h01c93b2aeb5bb4fb167b3e3b,
        96'h5d4918ec97185b7ed436dc91,
        96'h436f725fd07c3627e939e0c4,
        96'hc8c9bc9337eca3b5ce634ab1,
        96'hf90a4a744e31633301d9119b,
        96'h5bc6cf6a33081ac1b96f917a,
        96'h79ebd99d9a5eac1943a67b15,
        96'hc83766f3eb444959d0bd3c6b,
        96'hceb88eb52c06f287dd6c5f5b,
        96'h9c8ab069d787303c1f17b52c,
        96'h09e3cd3f2a82eedcfdda1a8e
    };
    
    // DUT signals
    reg clk = 0;
    reg rst;
    reg enable;
    wire [24 * streams - 1 : 0] result;
    
    // flag to stop simulation
    integer run = 1;
    
    // error counter
    integer errors = 0;
    
    // DUT
    xormix24 #(
        .streams(streams)
    ) inst_xormix (
        .clk(clk),
        .rst(rst),
        .seed_x(seed_x),
        .seed_y(seed_y),
        .enable(enable),
        .result(result)
    );
    
    // clock process
    initial begin
        while (run == 1) begin
            clk = 1'b1;
            #5;
            clk = 1'b0;
            #5;
        end
    end
    
    integer i;
    
    // input/output process
    initial begin
        @(posedge clk);
        rst <= 1'b1;
        enable <= 1'b0;
        @(posedge clk);
        rst <= 1'b0;
        enable <= 1'b1;
        for (i = 0; i < results; i = i + 1) begin
            @(posedge clk);
            if (result !== ref_result[24 * streams * i +: 24 * streams]) begin
                $display("Incorrect result for i=%d", i);
                errors = errors + 1;
            end
        end
        $display("Test complete, number of errors: %d", errors);
        run <= 0;
    end
    
endmodule

