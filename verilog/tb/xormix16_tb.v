// Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
// Available under the MIT License - see LICENSE.txt for details.

// This file was generated by `generate_verilog.py`.

`timescale 1ns/1ps

module xormix16_tb;
    
    // configuration
    localparam streams = 4;
    localparam results = 100;
    localparam [15 : 0] seed_x =
        16'h2138;
    localparam [16 * streams - 1 : 0] seed_y =
        64'h626e6b2fc22539a4;
    
    // reference result
    localparam [16 * streams * results - 1 : 0] ref_result = {
        64'h2110f183c694a1cf,
        64'h444cd0d9c9d9473f,
        64'haf2e6db99985923a,
        64'h1121365c556024aa,
        64'h28f33f0e79aa694c,
        64'h65a54f1b9237edf8,
        64'hcebef9993e6d35f5,
        64'hf507397b8b09ca32,
        64'hdf06bd68d9236b99,
        64'hcb47331efc673fe9,
        64'h787d3c46ccb54e13,
        64'hf32948be79a25ce3,
        64'h14c7d7b01497703a,
        64'h42db83f4301cac14,
        64'h665bfbe1e093a90f,
        64'h5aa8e982de642475,
        64'h22c0cfa8f7a7fca4,
        64'h5ac183a1f96fd60d,
        64'hb6b37b0703447cfb,
        64'h49d9a508e2831108,
        64'haf743b077750ed4d,
        64'h83762e241835a71c,
        64'h7f15cf94b1038588,
        64'h06148e3811ecf7c4,
        64'hc77cee334701a5b0,
        64'he0f3ba869d6bc81d,
        64'hbbf6b6592a1e2915,
        64'h04eb3fa55e5971ca,
        64'h852893447f9f3b2a,
        64'hd26ccc4b235aedad,
        64'h2b4632ff3f69beb7,
        64'h371c0fac025f173b,
        64'hf57fa2e929b614bf,
        64'h8d554b5ed6417913,
        64'h4072efc44d26cf41,
        64'h0a79d71746373130,
        64'hf76598b684af4ea0,
        64'hac44d9ca18d27668,
        64'hd1985df738869340,
        64'hdb7f246485364308,
        64'h26d4bfb45dbd0e11,
        64'h97d03d7c8bafde2f,
        64'hb2a8b3dece3b8763,
        64'h9421941652a6cda8,
        64'h6c8979fc38e98694,
        64'hba87f9e2915ae5bc,
        64'h60ad0ae6268c6770,
        64'h5a80b6d83aa59eb3,
        64'h9a12e3e7c0d55328,
        64'h67c35f10d1cf5d69,
        64'h53e398fdcf4e6b65,
        64'hdc7b221e92126902,
        64'h031e0bdf738986e8,
        64'hfaaa3ad0f216393f,
        64'h632eda2df46b0283,
        64'hb2c88f7aa9e1acb2,
        64'h939eaddb42b0e734,
        64'h04aab013982a2162,
        64'haef6680aade08d5b,
        64'hfd72cf1d40e90784,
        64'habf0101b9e7d86b9,
        64'hf87b6931a33dbed0,
        64'hfee9116710164202,
        64'h2012dfa0c56867d6,
        64'he3e86ffc1f31d3f2,
        64'h0ea17942c5cc1eec,
        64'h92ee7365b5179cea,
        64'h81345ec1c92de063,
        64'h24f44b9af314e9db,
        64'hdf9d11d80cfdcb75,
        64'h673ee3f31a38b626,
        64'had6f89579929008a,
        64'h780048308c01c99b,
        64'h5cd95bad69690c18,
        64'h59db631d4ef77878,
        64'h56a02447e600be10,
        64'he0d6e2cca22f97c2,
        64'h495c2708f2721d2d,
        64'h41d32c1a2cb8c854,
        64'hb0b7e72e74776d2b,
        64'h5950529b5161bfa0,
        64'h98df7c103f5513b7,
        64'h707927e3ff3cf1bd,
        64'hb5d5fba4f699f9d5,
        64'hc3ac822cc513ed95,
        64'h026d3be207e6a1a7,
        64'ha8afc4e18fdc4aa0,
        64'hfb1682d98d81ba03,
        64'h68078bfc26d788ab,
        64'h3c913a3dc62fdb78,
        64'hc256c9f89ce257e3,
        64'h8ae28b30f53cfc30,
        64'h22421712e4ca5b7d,
        64'h714770aeac1cd90a,
        64'h4780b20e2d3a161e,
        64'he9d5bc8a8a52d1c8,
        64'h72de7ddf43585969,
        64'h13efd11600b3eba4,
        64'hc5dd4a17cf8c11a4,
        64'h626e6b2fc22539a4
    };
    
    // DUT signals
    reg clk = 0;
    reg reset;
    reg enable;
    wire [16 * streams - 1 : 0] result;
    
    // flag to stop simulation
    integer run = 1;
    
    // DUT
    xormix16 #(
        .streams(streams)
    ) inst_xormix (
        .clk(clk),
        .reset(reset),
        .seed_x(seed_x),
        .seed_y(seed_y),
        .enable(enable),
        .result(result)
    );
    
    // clock process
    initial begin
        while (run == 1) begin
            clk = 1'b1;
            #5;
            clk = 1'b0;
            #5;
        end
    end
    
    integer i;
    
    // input/output process
    initial begin
        @(posedge clk);
        reset <= 1'b1;
        enable <= 1'b0;
        @(posedge clk);
        reset <= 1'b0;
        enable <= 1'b1;
        for (i = 0; i < results; i = i + 1) begin
            @(posedge clk);
            if (result !== ref_result[16 * streams * i +: 16 * streams])
                $display("Incorrect result");
        end
        run <= 0;
    end
    
endmodule

