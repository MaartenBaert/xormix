// Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
// Available under the MIT License - see LICENSE.txt for details.

#include "3rdparty/catch.hpp"
#include "common/xormix.hpp"

static constexpr size_t TEST_DIVISIONS = 20;

// Test vectors generated by `testvec_divide_period.py`.

static const size_t divide_period_input16[TEST_DIVISIONS] = {
	UINT16_C(0x0001), UINT16_C(0x0001), UINT16_C(0x0003), UINT16_C(0x0006),
	UINT16_C(0x000b), UINT16_C(0x0018), UINT16_C(0x0015), UINT16_C(0x0036),
	UINT16_C(0x004e), UINT16_C(0x00a6), UINT16_C(0x0089), UINT16_C(0x0135),
	UINT16_C(0x02df), UINT16_C(0x01a7), UINT16_C(0x064f), UINT16_C(0x03e0),
	UINT16_C(0x1a4b), UINT16_C(0x39d9), UINT16_C(0x7528), UINT16_C(0xd75c),
};
static const xormix16::word_t divide_period_output16[TEST_DIVISIONS] = {
	UINT16_C(0xffff), UINT16_C(0xffff), UINT16_C(0x5555), UINT16_C(0x2aaa),
	UINT16_C(0x1745), UINT16_C(0x0aaa), UINT16_C(0x0c30), UINT16_C(0x04bd),
	UINT16_C(0x0348), UINT16_C(0x018a), UINT16_C(0x01de), UINT16_C(0x00d4),
	UINT16_C(0x0059), UINT16_C(0x009a), UINT16_C(0x0028), UINT16_C(0x0042),
	UINT16_C(0x0009), UINT16_C(0x0004), UINT16_C(0x0002), UINT16_C(0x0001),
};

static const size_t divide_period_input24[TEST_DIVISIONS] = {
	UINT32_C(0x000001), UINT32_C(0x000001), UINT32_C(0x000004), UINT32_C(0x000008),
	UINT32_C(0x000013), UINT32_C(0x00001c), UINT32_C(0x000067), UINT32_C(0x000026),
	UINT32_C(0x000050), UINT32_C(0x0005ec), UINT32_C(0x000c23), UINT32_C(0x001a23),
	UINT32_C(0x001827), UINT32_C(0x001504), UINT32_C(0x009f44), UINT32_C(0x055489),
	UINT32_C(0x08a6f9), UINT32_C(0x0ceea5), UINT32_C(0x259b5f), UINT32_C(0x6ecf6d),
};
static const xormix24::word_t divide_period_output24[TEST_DIVISIONS] = {
	UINT32_C(0xffffff), UINT32_C(0xffffff), UINT32_C(0x3fffff), UINT32_C(0x1fffff),
	UINT32_C(0x0d7943), UINT32_C(0x092492), UINT32_C(0x027c45), UINT32_C(0x06bca1),
	UINT32_C(0x033333), UINT32_C(0x002b3a), UINT32_C(0x001517), UINT32_C(0x0009cb),
	UINT32_C(0x000a99), UINT32_C(0x000c2e), UINT32_C(0x00019b), UINT32_C(0x000030),
	UINT32_C(0x00001d), UINT32_C(0x000013), UINT32_C(0x000006), UINT32_C(0x000002),
};

static const size_t divide_period_input32[TEST_DIVISIONS] = {
	UINT32_C(0x00000001), UINT32_C(0x00000002), UINT32_C(0x0000000d), UINT32_C(0x00000008),
	UINT32_C(0x0000002a), UINT32_C(0x00000199), UINT32_C(0x00000257), UINT32_C(0x00000924),
	UINT32_C(0x00000fab), UINT32_C(0x00004307), UINT32_C(0x0001440f), UINT32_C(0x00003ff3),
	UINT32_C(0x0005d5f1), UINT32_C(0x0016c8ae), UINT32_C(0x003dace5), UINT32_C(0x0161a2ee),
	UINT32_C(0x01ca245c), UINT32_C(0x0984a1d8), UINT32_C(0x19ec13d7), UINT32_C(0x7e19d55f),
};
static const xormix32::word_t divide_period_output32[TEST_DIVISIONS] = {
	UINT32_C(0xffffffff), UINT32_C(0x7fffffff), UINT32_C(0x13b13b13), UINT32_C(0x1fffffff),
	UINT32_C(0x06186186), UINT32_C(0x00a03c16), UINT32_C(0x006d68b5), UINT32_C(0x001c01c0),
	UINT32_C(0x001056cd), UINT32_C(0x0003d1c0), UINT32_C(0x0000ca3c), UINT32_C(0x000400d0),
	UINT32_C(0x00002bde), UINT32_C(0x00000b3c), UINT32_C(0x00000426), UINT32_C(0x000000b9),
	UINT32_C(0x0000008f), UINT32_C(0x0000001a), UINT32_C(0x00000009), UINT32_C(0x00000002),
};

static const size_t divide_period_input48[TEST_DIVISIONS] = {
	UINT32_C(0x00000001), UINT32_C(0x00000001), UINT32_C(0x0000000a), UINT32_C(0x0000001c),
	UINT32_C(0x0000004b), UINT32_C(0x0000013f), UINT32_C(0x000001c5), UINT32_C(0x00000b3c),
	UINT32_C(0x00001716), UINT32_C(0x00005b76), UINT32_C(0x0000b603), UINT32_C(0x000149c2),
	UINT32_C(0x000f618e), UINT32_C(0x001d35e8), UINT32_C(0x007e094f), UINT32_C(0x017c6a21),
	UINT32_C(0x02669137), UINT32_C(0x0380b0bc), UINT32_C(0x0c0b8d8a), UINT32_C(0x0eb5f644),
};
static const xormix48::word_t divide_period_output48[TEST_DIVISIONS] = {
	UINT64_C(0xffffffffffff), UINT64_C(0xffffffffffff), UINT64_C(0x199999999999), UINT64_C(0x092492492492),
	UINT64_C(0x0369d0369d03), UINT64_C(0x00cd712752a8), UINT64_C(0x0090abcc0242), UINT64_C(0x0016c9863b1a),
	UINT64_C(0x000b16c8d09c), UINT64_C(0x0002cc8bdcec), UINT64_C(0x000168109203), UINT64_C(0x0000c6bd6331),
	UINT64_C(0x000010a4d232), UINT64_C(0x000008c39242), UINT64_C(0x00000207fa17), UINT64_C(0x000000ac4674),
	UINT64_C(0x0000006aa33c), UINT64_C(0x000000491627), UINT64_C(0x0000001540df), UINT64_C(0x0000001166f6),
};

static const size_t divide_period_input64[TEST_DIVISIONS] = {
	UINT32_C(0x00000001), UINT32_C(0x00000002), UINT32_C(0x0000000b), UINT32_C(0x00000007),
	UINT32_C(0x0000003d), UINT32_C(0x00000096), UINT32_C(0x000000e3), UINT32_C(0x00000419),
	UINT32_C(0x00000b63), UINT32_C(0x00003d20), UINT32_C(0x0001bf37), UINT32_C(0x00013c7b),
	UINT32_C(0x00030bba), UINT32_C(0x0009aa4c), UINT32_C(0x0040413f), UINT32_C(0x010374f6),
	UINT32_C(0x032a09e8), UINT32_C(0x0f082cc2), UINT32_C(0x01e1d44d), UINT32_C(0x411989b5),
};
static const xormix64::word_t divide_period_output64[TEST_DIVISIONS] = {
	UINT64_C(0xffffffffffffffff), UINT64_C(0x7fffffffffffffff), UINT64_C(0x1745d1745d1745d1), UINT64_C(0x2492492492492492),
	UINT64_C(0x04325c53ef368eb0), UINT64_C(0x01b4e81b4e81b4e8), UINT64_C(0x0120b470c67c0d88), UINT64_C(0x003e79886b60e278),
	UINT64_C(0x00167b7a28ecc45e), UINT64_C(0x00043029e1a2d05c), UINT64_C(0x0000928ae4077357), UINT64_C(0x0000cf13da4c3ead),
	UINT64_C(0x0000540ccb529339), UINT64_C(0x00001a7c9974c454), UINT64_C(0x000003fbf0340ab1), UINT64_C(0x000000fc96d47178),
	UINT64_C(0x00000050e79f7568), UINT64_C(0x0000001107c90816), UINT64_C(0x0000008803d56068), UINT64_C(0x00000003eeb37dd4),
};

static const size_t divide_period_input96[TEST_DIVISIONS] = {
	UINT32_C(0x00000001), UINT32_C(0x00000001), UINT32_C(0x00000006), UINT32_C(0x0000000c),
	UINT32_C(0x00000049), UINT32_C(0x00000106), UINT32_C(0x00000095), UINT32_C(0x00000e96),
	UINT32_C(0x00001db7), UINT32_C(0x000069a1), UINT32_C(0x0001acc0), UINT32_C(0x00031207),
	UINT32_C(0x000a2acb), UINT32_C(0x000bdec9), UINT32_C(0x001da554), UINT32_C(0x00f9f61f),
	UINT32_C(0x01c5bf47), UINT32_C(0x03df7832), UINT32_C(0x1a76aed0), UINT32_C(0x1fc0a92d),
};
static const xormix96::word_t divide_period_output96[TEST_DIVISIONS] = {
	UINT64_C(0xffffffffffff), UINT64_C(0xffffffffffff), UINT64_C(0xffffffffffff), UINT64_C(0xffffffffffff),
	UINT64_C(0xaaaaaaaaaaaa), UINT64_C(0x2aaaaaaaaaaa), UINT64_C(0x555555555555), UINT64_C(0x155555555555),
	UINT64_C(0x1c0e070381c0), UINT64_C(0x0381c0e07038), UINT64_C(0x138abf82ee69), UINT64_C(0x00fa232cf252),
	UINT64_C(0x38b2af3f920a), UINT64_C(0x01b7d6c3dda3), UINT64_C(0x8f901c854770), UINT64_C(0x00118d18451b),
	UINT64_C(0x510974e0ab3a), UINT64_C(0x00089d7f3e28), UINT64_C(0xba3a3902caf4), UINT64_C(0x00026c6fac89),
	UINT64_C(0x0ec720b0bcad), UINT64_C(0x000098da886f), UINT64_C(0x927bc39ed3eb), UINT64_C(0x0000536050e4),
	UINT64_C(0xafc2f6ca8202), UINT64_C(0x0000192dd9e3), UINT64_C(0x4e5d7d9b3ff7), UINT64_C(0x000015910701),
	UINT64_C(0xa598c3fc139b), UINT64_C(0x000008a2a1f0), UINT64_C(0x712d884469a5), UINT64_C(0x000001062f39),
	UINT64_C(0x8cf32866861a), UINT64_C(0x000000906ecf), UINT64_C(0xb07bbdbf21ac), UINT64_C(0x000000421990),
	UINT64_C(0x304e60ba081f), UINT64_C(0x00000009ac75), UINT64_C(0x4af80b370601), UINT64_C(0x000000080ff5),
};

static const size_t divide_period_input128[TEST_DIVISIONS] = {
	UINT32_C(0x00000001), UINT32_C(0x00000003), UINT32_C(0x0000000f), UINT32_C(0x00000011),
	UINT32_C(0x00000040), UINT32_C(0x0000007e), UINT32_C(0x00000244), UINT32_C(0x0000084c),
	UINT32_C(0x00000e50), UINT32_C(0x000046b1), UINT32_C(0x00018084), UINT32_C(0x00039298),
	UINT32_C(0x000112dc), UINT32_C(0x000064ae), UINT32_C(0x003f0c98), UINT32_C(0x011950fb),
	UINT32_C(0x014e717d), UINT32_C(0x07359d17), UINT32_C(0x1294b0cd), UINT32_C(0x6b11f852),
};
static const xormix128::word_t divide_period_output128[TEST_DIVISIONS] = {
	UINT64_C(0xffffffffffffffff), UINT64_C(0xffffffffffffffff), UINT64_C(0x5555555555555555), UINT64_C(0x5555555555555555),
	UINT64_C(0x1111111111111111), UINT64_C(0x1111111111111111), UINT64_C(0x0f0f0f0f0f0f0f0f), UINT64_C(0x0f0f0f0f0f0f0f0f),
	UINT64_C(0xffffffffffffffff), UINT64_C(0x03ffffffffffffff), UINT64_C(0x2082082082082082), UINT64_C(0x0208208208208208),
	UINT64_C(0x70fe3c070fe3c070), UINT64_C(0x0070fe3c070fe3c0), UINT64_C(0x5d0c0d7fc24a3eac), UINT64_C(0x001edae0a9b3d3a5),
	UINT64_C(0x4313011e2ef3b3fb), UINT64_C(0x0011e2ef3b3fb874), UINT64_C(0x71cdf3946f1306bf), UINT64_C(0x00039f1258ebf483),
	UINT64_C(0x393efd03b165afb6), UINT64_C(0x0000aa701423be61), UINT64_C(0x437e04cf95c69a12), UINT64_C(0x000047a7e6519334),
	UINT64_C(0x9c87ec8ead356502), UINT64_C(0x0000ee6f457d75e4), UINT64_C(0xc790478390d5e7f6), UINT64_C(0x00028aef882ca80e),
	UINT64_C(0x6030b53f52f5e46e), UINT64_C(0x0000040f713b0413), UINT64_C(0x2578735af83a8550), UINT64_C(0x000000e8f6422b9d),
	UINT64_C(0x94b6f8cf955ed168), UINT64_C(0x000000c3f49a53e2), UINT64_C(0x6c6d79d78b912446), UINT64_C(0x0000002382519248),
	UINT64_C(0xb0c59f5bbb1e83ab), UINT64_C(0x0000000dc713d04e), UINT64_C(0x468cb364edea6132), UINT64_C(0x0000000264159d87),
};

#define XORMIX_DIVIDE_PERIOD(n) \
TEST_CASE("xormix"#n" divide period", "[xormix"#n"][divideperiod]") { \
	for(size_t i = 0; i < TEST_DIVISIONS; ++i) { \
		INFO("division " << i) \
		REQUIRE(xormix##n::word_equal(xormix##n::divide_period(divide_period_input##n[i]), divide_period_output##n[i])); \
	} \
}

XORMIX_DIVIDE_PERIOD(16)
XORMIX_DIVIDE_PERIOD(24)
XORMIX_DIVIDE_PERIOD(32)
XORMIX_DIVIDE_PERIOD(48)
XORMIX_DIVIDE_PERIOD(64)
XORMIX_DIVIDE_PERIOD(96)
XORMIX_DIVIDE_PERIOD(128)
