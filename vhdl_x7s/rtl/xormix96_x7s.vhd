-- Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
-- Available under the MIT License - see LICENSE.txt for details.

-- This file was generated by `generate_vhdl_x7s.py`.
-- This is a non-portable implementation optimized for Xilinx 7-Series FPGAs.
-- Revision: 1

library ieee;
use ieee.std_logic_1164.all;

library unisim;
use unisim.vcomponents.all;

entity xormix96_x7s is
    generic (
        streams : integer range 1 to 96 := 1
    );
    port (
        
        -- clock and synchronous reset
        clk    : in std_logic;
        rst    : in std_logic;
        
        -- configuration
        seed_x : in std_logic_vector(95 downto 0);
        seed_y : in std_logic_vector(96 * streams - 1 downto 0);
        
        -- random number generator
        enable : in std_logic;
        result : out std_logic_vector(96 * streams - 1 downto 0)
        
    );
end xormix96_x7s;

architecture rtl of xormix96_x7s is
    
    constant lutval_xor5 : bit_vector(31 downto 0) := x"96696996";
    constant lutval_xor6 : bit_vector(63 downto 0) := x"6996966996696996";
    constant lutval_mix0 : bit_vector(63 downto 0) := x"59a6a659a65959a6";
    constant lutval_mix1 : bit_vector(63 downto 0) := x"a65959a659a6a659";
    
    function select_lutval_mix(
        bit : std_logic
    ) return bit_vector is
    begin
        if bit = '0' then
            return lutval_mix0;
        else
            return lutval_mix1;
        end if;
    end select_lutval_mix;
    
    type matrix_t is array(0 to 47, 0 to 10) of integer range 0 to 95;
    constant matrix : matrix_t := (
        ( 2, 75, 41, 57, 14,  9, 13, 15, 10, 59, 88),
        ( 6, 78, 53,  3, 59, 92, 43, 20,  8, 38, 56),
        (38, 25, 47,  0,  7, 52, 18, 94, 66, 28, 13),
        (54, 14, 51, 52, 18, 16, 62, 64, 88, 43, 61),
        ( 0, 85, 62, 28, 23, 50, 25,  6, 41, 30, 95),
        (76, 95, 58, 16, 85, 43, 36, 45, 80, 78, 17),
        ( 1, 42, 75, 81, 59, 19, 56, 23, 55, 84, 79),
        (12, 46, 19,  5, 48, 71,  6, 59, 44, 10, 39),
        (11, 77,  4, 21, 58,  9, 44, 62, 15, 84, 40),
        (25, 93, 48, 87, 32, 48, 82, 45,  8, 29, 90),
        (10, 30, 59, 46, 69, 55, 88, 78, 53,  1, 63),
        (62, 80, 33, 37, 53,  3, 35, 34, 37,  1, 23),
        (52, 51, 86, 69, 17, 27, 50, 79, 83, 76, 95),
        (78, 42, 70, 57, 94, 87, 22, 26, 49, 84, 83),
        (94, 76, 28, 42, 14, 11, 22, 92, 58, 88, 16),
        (40, 77, 12, 65, 34, 31,  8, 21, 15, 68, 75),
        (39, 64, 90, 69, 79, 85, 35, 61, 90, 63, 92),
        (34, 12, 73, 57,  1, 79, 37, 32, 47, 66, 86),
        (43, 35, 25, 65, 72, 40, 24, 77, 59, 16, 50),
        (45, 20, 56, 46, 80, 25, 70, 64, 31, 46, 74),
        (72, 65,  2, 36, 69, 90,  3, 71, 86, 18, 63),
        (47,  4, 27, 24, 92, 48, 67, 68, 42, 89, 85),
        (10, 51, 13, 60, 89, 60,  7, 32, 68, 30, 71),
        (33, 19,  3, 65,  8, 34, 30, 86, 38, 31, 29),
        (55, 41, 26,  9,  7,  4, 53,  7, 44, 36, 24),
        ( 4,  7, 49, 93, 22,  6, 53, 66, 75, 35, 95),
        (30, 14, 24, 28, 87, 10, 52, 13, 11, 33, 40),
        (19,  4, 83, 32,  7, 85, 27, 93, 94,  7, 73),
        (68, 92, 32, 13, 10, 57, 90, 36, 87, 75, 54),
        ( 2, 24,  0, 38, 45, 21,  0, 28, 13, 53, 54),
        (40, 73, 80, 95, 46, 84, 43, 73, 22, 92, 38),
        (52,  1, 76, 39, 86, 48,  2, 86, 17, 49, 93),
        (74, 25, 69,  6, 37, 15, 23, 52, 77, 91, 51),
        (81, 20, 64,  5, 87, 51, 15, 20, 72, 39, 60),
        (43, 89, 35, 70, 37, 71, 40, 34, 66, 60, 14),
        (48, 32, 29, 76, 87, 44, 89, 19, 20,  9, 77),
        (81,  8, 75, 49, 47, 29, 41, 67, 12,  6, 56),
        (49, 82,  5, 17, 58, 78, 62, 19, 68, 63, 94),
        (18, 45, 57, 41,  1, 83, 58, 72, 31, 74, 63),
        (13, 79, 47, 67, 71, 31, 91, 69, 47, 74, 65),
        (16, 72, 81, 82, 26, 42, 57, 41, 88, 95, 12),
        (81, 91, 40, 11, 26, 50, 93, 27, 70, 77, 92),
        (80,  9, 64, 34, 70,  2, 74, 29, 83, 67, 18),
        (20, 47, 33, 60, 19, 17, 52, 39, 89, 67, 91),
        (54,  5, 39, 79, 77, 82, 21, 84, 42, 36, 66),
        ( 9, 32,  0, 11, 23,  5, 56, 61, 72, 18, 55),
        (58, 95, 86, 81, 22, 73, 26, 70,  3, 61, 82),
        (44,  8,  2, 50, 42, 55, 83,  5, 33, 16, 21)
    );
    
    type salts_t is array(0 to 95) of std_logic_vector(95 downto 0);
    constant salts : salts_t := (
        x"6319a0b833efe6e1c2523bab", x"6065db7e5e9528c24e41956c", x"45405efdaa7a8343f957dbb2", x"0e1f7d0fa053e5d590c79c4e",
        x"a5b1c14726c172f51066b415", x"aead4a87a54e563e593aef70", x"f85964c82d1057eacf751855", x"c8d61c3bdd042220e6f59d5c",
        x"ffdfe8c9ec04bbdf7bee652e", x"0bb59f564d1d3cf833623b5c", x"68ab49b831b7dc4a4b49c11d", x"b657de372e382df2d4f33c4c",
        x"1b15b9b87e0bb24f224d200f", x"e0592230e4f0f05e619655c0", x"55568b9e8eb9df8518243c1e", x"2097eb070e750e2fda153d84",
        x"a8eefca08e65f7411d8164ba", x"89ada553c5679f8fd13e40e1", x"2ee76cd6b4ec42c1ec2f26a4", x"2c6c0454a632bf6b2c0f4a77",
        x"0b37c3a328d89981c733d157", x"35dd3d4dfe6191ec2c80e292", x"417e0444496792df5700a660", x"ca4e892f298a13178eb22a88",
        x"6b62bb76b84522e412ce68ac", x"50401c5a2989c7eb98ab64fb", x"afc0de3b891e7fd3e8882b5c", x"2539fb51cfa4d3b5fd0b6e9a",
        x"67d1e7005a5054442f94ba0a", x"5ab4670b4474e57d2914a95c", x"0c94162c5cd979a2d0002c45", x"62842083ccff93988a99d2a4",
        x"d9714416b2cae88fa0370fef", x"71e565420304e2da8b9c4ea0", x"f600635b03e92f2fb54339b7", x"3b2b25e41fd40e07b212e026",
        x"1437b070792723e29f5da7d4", x"14f049c34ce725aa2c490b12", x"980a5232856ce525a0aec14c", x"621ca5773ee005f36b66d06c",
        x"38fed51e65bc0562992c8488", x"acb5372755de946dfd193631", x"b2c1198a220c9f9668cc5101", x"fb904152a0011280558611fb",
        x"ced40885938f39870226cc5b", x"db2b3756627f87cf98d9ec8a", x"4948ad10dbffb552f5e0efac", x"ebedd4ed7a029ae094807b62",
        x"85efd26b94b3cf95a9421cbc", x"124a583ab57fab16980c1af0", x"0162d2d5a8a530c7d02d3520", x"d4bf39f96519f627fe72b19f",
        x"59b142a05f99b1fa91c8f332", x"105feec6ab487d1fbd5a4fec", x"e5532b05511358d1bc75473a", x"8dfbf97fde56ad24ebcbc639",
        x"de40acfad1d7202f6ab8b81f", x"2e921e597fb8abf6b6da65ab", x"aa0f40d36ad7f3e4fde1f23e", x"5d02c224218a45f4cff511f6",
        x"4b12bd11e2b967fe411d9e2d", x"c6e89b6f342a8419d1c4e967", x"8ce6c1f47c8cac99c26d675f", x"a4436deb7759e3bab96783bc",
        x"9cd991a210523ae251322632", x"ef206554e9b3cc1466d55960", x"756e211b269c1a5d49fd8319", x"d09797bac005ff7fc38f9668",
        x"96ca13281ff64d69d6a9f493", x"9a50ef154caa345ddd4b8448", x"3c4c5f09a90e00465de9b33e", x"526d1f91c85c680358a4e882",
        x"1c82cd96109c8d647b5b52c2", x"316799a62a2b444c30435136", x"08380ff335a17a11ab09ac47", x"ba77c19d9e6c52f50325a5fe",
        x"41c3c9dbbde1af343fd91134", x"e0999d460fed097784e989e9", x"a3dd3f1b7fd7e392762e4443", x"eea1f4020b54b2e4df3ef598",
        x"bf2b253de7f82582bb31175f", x"66b33be6f1649b539c55a908", x"3c5cc9869dbc64772b58fd36", x"caaed07863593c4c06197a6c",
        x"1a90406dce189bc627cd9cba", x"84812ab822175870f588b01e", x"3e5e9bdd1d64b04f9d92d83b", x"3bc6cf51e924f7c6ec628791",
        x"41cd883fb8ff53f739d3546a", x"87477f4ae25467ff87f2efa6", x"ea009c451178d52621247482", x"a84713d6f74b340bb2cc2fab",
        x"fa0fdf6dc5d11206f6e198a4", x"64fd0ca64551dbecdcd28ff9", x"c4d5c6cf20379c2bcf02bcf7", x"1bff24a6febaa737fdefa863"
    );
    
    type shuffle_t is array(0 to 95) of integer range 0 to 95;
    constant shuffle : shuffle_t := (
        50, 20, 91, 59, 26,  4, 58, 25,
        71, 77, 13,  2, 30, 72, 11, 15,
        45, 61, 80, 19, 33, 35, 62,  1,
        74, 18, 90, 66, 67, 88, 28, 53,
        23, 94, 55, 37, 34, 24, 65, 46,
        32, 84, 79, 48, 92, 57, 41, 27,
        64, 95, 70,  6, 93, 21, 76, 85,
        40, 83, 56, 29, 12,  9, 68, 73,
        78, 69, 22, 47, 42, 82, 44, 54,
        36,  5,  3, 63, 31, 16, 87, 38,
        10, 81, 60, 51, 43, 75,  8, 89,
        39, 86, 14,  7, 52,  0, 49, 17
    );
    
    signal r_state_x : std_logic_vector(95 downto 0);
    signal r_state_y : std_logic_vector(96 * streams - 1 downto 0);
    
    signal state_x_next : std_logic_vector(95 downto 0);
    signal state_y_next : std_logic_vector(96 * streams - 1 downto 0);
    
    type state_sr_t is array(0 to streams - 1) of std_logic_vector(191 downto 0);
    signal state_sr : state_sr_t;
    
begin
    
    result <= r_state_y;
    
    gen_bits: for i in 0 to 47 generate
        lut_xor5: LUT5 generic map (
            INIT => lutval_xor5
        ) port map (
            O => state_x_next(2 * i),
            I0 => r_state_x(matrix(i, 0)),
            I1 => r_state_x(matrix(i, 1)),
            I2 => r_state_x(matrix(i, 2)),
            I3 => r_state_x(matrix(i, 3)),
            I4 => r_state_x(matrix(i, 4))
        );
        lut_xor6: LUT6 generic map (
            INIT => lutval_xor6
        ) port map (
            O => state_x_next(2 * i + 1),
            I0 => r_state_x(matrix(i, 5)),
            I1 => r_state_x(matrix(i, 6)),
            I2 => r_state_x(matrix(i, 7)),
            I3 => r_state_x(matrix(i, 8)),
            I4 => r_state_x(matrix(i, 9)),
            I5 => r_state_x(matrix(i, 10))
        );
    end generate;
    
    gen_stream: for i in 0 to streams - 1 generate
        constant k : integer := (i + 1) mod streams;
    begin
        state_sr(i)(95 downto 0) <= r_state_y(96 * i + 95 downto 96 * i);
        gen_bit: for j in 0 to 95 generate
            constant l : integer := (i + shuffle(j)) mod 96;
        begin
            lut_mix: LUT6 generic map (
                INIT => select_lutval_mix(salts(i)(l))
            ) port map (
                O => state_sr(i)(j + 96),
                I0 => state_sr(k)(j),
                I1 => state_sr(k)(j + 45),
                I2 => state_sr(k)(j + 46),
                I3 => state_sr(k)(j + 36),
                I4 => state_sr(k)(j + 43),
                I5 => r_state_x(l)
            );
        end generate;
        state_y_next(96 * i + 95 downto 96 * i) <= state_sr(i)(191 downto 96);
    end generate;
    
    process (clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                r_state_x <= seed_x;
                r_state_y <= seed_y;
            elsif enable = '1' then
                r_state_x <= state_x_next;
                r_state_y <= state_y_next;
            end if;
        end if;
    end process;
    
end rtl;

