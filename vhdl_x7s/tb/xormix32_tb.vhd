-- Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
-- Available under the MIT License - see LICENSE.txt for details.

-- This file was generated by `generate_vhdl.py`.

library ieee;
use ieee.std_logic_1164.all;

entity xormix32_tb is
end xormix32_tb;

architecture bhv of xormix32_tb is
    
    -- configuration
    constant streams : integer := 4;
    constant results : integer := 100;
    constant seed_x  : std_logic_vector(31 downto 0) :=
        x"df2c403b";
    constant seed_y  : std_logic_vector(32 * streams - 1 downto 0) :=
        x"a9140006e47066dd25e5a545abac0809";
    
    -- reference result
    type result_array_t is array(0 to results - 1) of std_logic_vector(32 * streams - 1 downto 0);
    signal ref_result : result_array_t := (
        x"a9140006e47066dd25e5a545abac0809",
        x"72f2ab4fbd5698b41657384cfb444495",
        x"5cfdf623fa4b0f48d477a2bac61cd103",
        x"44b21fc9409b9a42e28ff6f7c4d46807",
        x"fc26409d3635a017276588f9bec4ed3b",
        x"16fc58f39bc40eb18a722ce8c7b85af9",
        x"75a3fb5d9a50ec995e6c1ad163f72362",
        x"537b49cb65b06f10b26b59715ab21278",
        x"041187881272d3ec30ac445b73ce160d",
        x"90a5b0070b1d74a192fa0d3ca1b3ec64",
        x"3bd77b3f225f45a3cca9557980b06b25",
        x"a062ad1d319060e207ca239034fb4da7",
        x"51f4cff5588773669d1457b79f694739",
        x"d9bcef901d5cf5a156cc6be4a4e99b48",
        x"bf0777e99668e7f3738c429a0a41c1c2",
        x"2aa6d981ef2824d4c6b16808b2a1dcec",
        x"be82244349da021acb6496e8baca5de9",
        x"36a06b3754a8184444d6632b577c58f6",
        x"5411027b8524d3f831cecdd29cc24aa1",
        x"98a857f5d2558a398d92340ad3e940ef",
        x"c9706d0204f4363a5aa46c6c3ecdb444",
        x"c4cead2f47f6148899c272e090abc2ff",
        x"6221fa516c183cea983e750e1e286090",
        x"1f11cfec4276ceb6891447527fb90354",
        x"19672821db4fa5db6dd332e938cee06d",
        x"b66895e8955de711d042b5eb661de549",
        x"9b024c56b43cac94e84abdf41d688efb",
        x"9dfb9b05cce1f50d9e9dbeb31a1b8181",
        x"fe2b27730ad7ef1f1679078856987974",
        x"017ddee149ebb857a1124197fed8e778",
        x"db02c35eaa725b30eae46b291a0abf45",
        x"e930602e95e4d1ccb9958fa06104ffaa",
        x"67051639d07c5af629b320c21001d86f",
        x"d7be710505b0f867a350b7f386307043",
        x"554421f0ff02e3dd719d2e9a0d9fd47b",
        x"20afe514d72d3eb4c5405f384d8e6dff",
        x"d83ef3a4a3c0f855df41bf2045b7b378",
        x"e5a68648373f8f15d221d77b00b8b5cb",
        x"5673be7454e19d9643d18dba31980d15",
        x"737cc97e2856a0cc3ce7e0c93a4e0cff",
        x"1214dddf53e4c527b83ec2476286150b",
        x"bbab43e6beb0a91c57095085e230bd66",
        x"11be5a7930b0535c6bd0fafb87d0743e",
        x"4e42ae569d001516151d3f6c5582a446",
        x"6aa189c5a005ef500609f3fc6be3de0e",
        x"4a575895e5ba4787f5c49d693596a70c",
        x"b28975e63f369f6e24a5f7af41b39fcf",
        x"a1c44078a37a045698d7e467a279b76b",
        x"c77da79b04e7cc4dc17239ea3c4b722c",
        x"1c59333e37b6dd7cc09f6b8431f603b6",
        x"313e1d51cfabc221b4275d7b2d466e13",
        x"65010ab8d4d2a3315cea4acde74170ef",
        x"d288d4e1b5fa77e8bf08b99cd5d60541",
        x"993c3bb649c6117fd857242dd1cab1e5",
        x"e34c876e932236b7a1752d973b8e4feb",
        x"bfcf4cbb7a37f7b3b33d02f2fdf65be2",
        x"244fa6a14e131c924817b559f4b4cb42",
        x"e98e74bc5c7e8438a796cf6ca7ef4042",
        x"755673eceaf465918b3a5ad7393b59ad",
        x"3b9ea408e4f36c56905d9aee1ab74176",
        x"3fa947b69f79b1357b327f629b8e4fb6",
        x"d5a181b801d0d9df1ea10d9bae411ec4",
        x"a17fd3df45950367c133d31f85c16dc9",
        x"384b5f5670b448eaa25a3a123483f5bc",
        x"26a421fea6e2893883e6533da96f4d90",
        x"ec7c67ec0f889ed96725657d09373df1",
        x"45d27648f4ee142bc9c52a2d1182e7a4",
        x"c6cd8de7e92fca18d44cc106671c93ef",
        x"8eaab391d604fb20e0feb4af62a3cb2d",
        x"a98039f8a9e7dcf92eea74fc2d7fc206",
        x"31222e4c4d2c8bf52c33b28624fb6f21",
        x"fb80ae5ae5a46e5e4f8393a5411b9aa8",
        x"6be720f08f29182c3f689d2e88cba34d",
        x"488590b842acbbcf337287a8d3d0c469",
        x"bb6c2228bd3a9834625dc2f2e601dd0e",
        x"8f31ff588b9d4340a446151d6ff92be4",
        x"daa19bb0b99e1e06c695b99369e9ec6b",
        x"b665ce1d673aee7c9ccfb9db358080e9",
        x"9c3dbec374715279473ed6dda9bf191a",
        x"8cd5c8f72b03d2e582626dbe140bc4e5",
        x"36c33d0990446cbc2fe209c78ffba7d9",
        x"980c685bc262b3143f379b2abe52706f",
        x"aaf6069bcb10e8378b862b5914f6c816",
        x"47ed46deeb2ded7e23c089c62a7a118b",
        x"f75a917add3803b7e8d597cd499bd161",
        x"a6a625142f49201b30d6e7392afd37d8",
        x"6faa6f6d6cb4174754fa414136c3ac20",
        x"0a28adaea8791b525ed06395d034317f",
        x"fd2c88ec407a8a2b9e08e4678ceb49e6",
        x"7cd1377c1a5c00a5b33c1a2de61ec116",
        x"b4123a34a06f8c0d189c7d933c2419d7",
        x"0e1289ee8f38605daaf141676dbee3af",
        x"f12a8e4ce2c22b85f97082aa29210d2b",
        x"326fcc1e4f1d4508736fd4ec78c9f4e7",
        x"c31a44f52643d1f30cf362b78712f55f",
        x"44abb36e5ea9edad7aa1f706de3bac85",
        x"cb5c6cea3a926c9aac69685a6672704c",
        x"b5f11b45c4da159b4898cec274af8d1e",
        x"da29d519d0f02195380e751ca65805eb",
        x"58196a68b24d628aa1172ca3c4a881c7"
    );
    
    -- DUT signals
    signal clk    : std_logic := '0';
    signal rst    : std_logic;
    signal enable : std_logic;
    signal result : std_logic_vector(32 * streams - 1 downto 0);
    
    -- flag to stop simulation
    signal run : boolean := true;
    
begin
    
    -- DUT
    inst_xormix : entity work.xormix32_x7s generic map(
        streams => streams
    ) port map (
        clk    => clk,
        rst    => rst,
        seed_x => seed_x,
        seed_y => seed_y,
        enable => enable,
        result => result
    );
    
    -- clock process
    process
    begin
        while run loop
            clk <= '1';
            wait for 5 ns;
            clk <= '0';
            wait for 5 ns;
        end loop;
        wait;
    end process;
    
    -- input/output process
    process
        variable errors : natural := 0;
    begin
        wait until rising_edge(clk);
        rst <= '1';
        enable <= '0';
        wait until rising_edge(clk);
        rst <= '0';
        enable <= '1';
        for i in 0 to results - 1 loop
            wait until rising_edge(clk);
            if result /= ref_result(i) then
                report "Incorrect result for i=" & integer'image(i) severity warning;
                errors := errors + 1;
            end if;
        end loop;
        report "Test complete, number of errors: " & integer'image(errors) severity note;
        run <= false;
        wait;
    end process;
    
end bhv;
