-- Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
-- Available under the MIT License - see LICENSE.txt for details.

-- This file was generated by `generate_vhdl.py`.

library ieee;
use ieee.std_logic_1164.all;

entity xormix128 is
    generic (
        streams : integer range 1 to 128 := 1
    );
    port (
        
        -- clock and synchronous reset
        clk    : in std_logic;
        reset  : in std_logic;
        
        -- configuration
        seed_x : in std_logic_vector(127 downto 0);
        seed_y : in std_logic_vector(128 * streams - 1 downto 0);
        
        -- random number generator
        enable : in std_logic;
        result : out std_logic_vector(128 * streams - 1 downto 0)
        
    );
end xormix128;

architecture rtl of xormix128 is
    
    type salts_t is array(0 to 127) of std_logic_vector(127 downto 0);
    constant salts : salts_t := (
        X"13262f1ed94d35de5037b5ab9dbc3488", X"7ff3ef25ad7380b8adf9a9bdbff1223e", X"381bbba7d431439e3a7e57b7273176a3", X"103dca29fc314d3f05e11fe401cf6fbb",
        X"9575b7768be3b6f63b37be5e9323f719", X"b310cd417e865701852c0f137baa77c1", X"f91ab0c9d06a6fab8f59b935b3e19ad0", X"bb051ea62ebdb876a498e6edd1a7fff8",
        X"d4d69acbbb4ef412be6edd8b7b1da9c4", X"58c7d8956ee996cb3201f2fcb2913077", X"44c0eaa7acea07dc067157b612a796d0", X"0bfadd9ea78537202f0dc6387e490584",
        X"e84ed06e8ef90d826a4794d71bfde238", X"8333c010a7a2c1de068d13b2573889f5", X"131b25f5290a2d7c300c62a1f3f988a7", X"51690ae0ba825d13e93a50422bf7c93e",
        X"5401edc6eacf9376c9b1740ae1682c7c", X"0102213a944f7a3b11412a294eaec4e3", X"a30c5a4fca8b3b774f1f20a17431ea84", X"b87010456ab8d88b8dd4c95dc5d17fc8",
        X"0e751da1db416c312ebdc43faa118a3d", X"e8ebde2abd705c86d8f9fd86993a5e7b", X"0c2437807aaa24ff76d338b2696cbd46", X"e0cda84666200d77794f864e524e3d05",
        X"7331f65d083f981679bdb371e10deab6", X"14e1dbdb706146c87ccd29aa9617940c", X"3129867e0d1cae8743365f3838f1a6f2", X"20a9e692001abc41d2675a5ef558c9ca",
        X"992ecb2546eba50e3c3a38d31856c3be", X"f5474098a6f8e72c88a90385e1bb7ec4", X"f4ca5329109c00d36cefa419fabae38e", X"0e0a135ebd4ade22fa6502f6572ce3b5",
        X"b499352d4c2c6d328f36503aa9322a10", X"658f170a3d5eb1382859bd534c03eddc", X"301d9ba87df8d36c59a70c4f5c903b9d", X"89d5524900fe6b6701072fd7e66b3aa3",
        X"bf53a13583b45c0c767602e169da1734", X"c8e4c9c9ff5231667370d2ffaaf50692", X"360f32162410c113d593ba723fc7d8c6", X"5e6024e9ee3f909d7ea8be62f7d37e6f",
        X"b7ab9b30669a5a6070e8ebe1e1b3a93e", X"22b34c2e328f75bdc413ba90f1784dec", X"4c09a5bcf925c18d83718e4b5e59cb10", X"85c76e9db31ad05530bb301a56b5218e",
        X"f37135381111fd49faa63ff210faa19e", X"d1d1ea95a0e8c0bf3d5e8a1f3bdac15b", X"5933613e9f3214ebd8f5cd3857a43a64", X"d9bf1cdf18b5d798beff10e60b0f9ac6",
        X"51981d2ac6601c9d7618b748f434fe31", X"9a69338b783383a3f77adc87e60bcd0f", X"e0bd8f5a2afeb40288b78f95c2b1984f", X"7e1e701939f16165359190cf59a54f04",
        X"02b67174dc3c1d518733c6cd6eb481e5", X"e3264b5d279d0575b9ec55cb7c363c39", X"c7feacc68d29d6fac50981d3c4088e92", X"ae5910192d2aa1f4812c455df6cf92d0",
        X"80d258457c5bc95074c8d42a5a86f753", X"6c65832f23f43eae6ef671a872141a82", X"b50a5ea77901f55f0434eb9ae66b5b33", X"5e684ded016cb40d387f22aea9be95c6",
        X"afd9af4b5cf7191f1ea35cb9fd2e62f9", X"97d615c53cd4923c614d38a4b90171b2", X"0db87bc5c1e6728379b2d3a9b29b5521", X"e20c664651c3d42328707a583af04239",
        X"c5fbf5c3a47655d67e027925e7675b94", X"730e3687735b1889b88a8e07cf291032", X"a0e7875e6c8cad2ef005cbf2adbb271c", X"b1af2c9c8c29a4e474d2338b5bad0afb",
        X"aee9cf0e3d634e786dbe13197f40cc43", X"17542b21cbec8d1495d843f20f9358b1", X"bfd591a612ab72bf2e682e54723518c7", X"923c62e69bde4f75b7b11297d6d46d4e",
        X"2a58c173ee11d4cafbc52f5cd9fc10bb", X"c8d9279162d7730eca5dde8c906754f6", X"ecd0cfe2ef3a2b6297a49e801f6214fe", X"c3c09bd89e26a8d21639de509e92ea9e",
        X"57960c3e5964c51b258678211c569f01", X"f3c2b154f0073720e761fae8b3d9d4cd", X"3696ca65addca66ffe04506afccfd23f", X"c8282c0619a4ab4ab3bb0c8667adf5ec",
        X"e996c824b1a3b36d7bf40c8bf34821d5", X"20c9d2c922f18772e15b109bc8816f21", X"857e76882355a43174069f24aaef94f3", X"65bc59d13c9f1c020606c022e177884c",
        X"6950dd6b52bccfa99b73077b4199b59c", X"304931f308d9a27c11fb3a34ebedbe58", X"df182f5cab14cd39cf622a6d3bff6107", X"65a35232d8d0dbe4790a2a7edd383fe0",
        X"47128844e1e9270bf8df480e46fb4bc6", X"dbeaae962a0a698f5088ffd970256144", X"8aed916e4d36e7d3441a670f9380f30d", X"bcbfbb13f986a39653cfbf7152d255d2",
        X"16e10d8df52cc48442a5d5256969aa9a", X"43cb709d85da0e5015a892a614986841", X"397e57c92f9861547b24ca77b1cea27c", X"a355f9fd7fbf38fbcc8af45404fcc6be",
        X"aa5cd73b8a0940b4fc5b3ac93926cd6a", X"5ded207cd2e59c3da8fab36f9a21157f", X"3a6f475c1ecb7c13d996cd4441425a97", X"77b676851c7abda850afc4b495085f2c",
        X"f7ad24f6275633672634c1d79f45892d", X"da03176c01e50cdfe333b2d35fa015b6", X"2863d4577783878fd8a58035655c3deb", X"b334f15329dccb8cd1fd224b16e58d79",
        X"fdf7d79bc286586dc82f31311f9e6fca", X"d5ae4ce8a7ce08fcffafc51ae8a5fb93", X"026439f83ae85ad94a127c8b01990c54", X"7aa46106c2c9f687828e598d46c3b205",
        X"957b133698028d825c50a7eddc43a709", X"11b01d55dd67c0c6e42ebea0b91fe54f", X"0deea11cc253bddcc56da2d3f7a67ebc", X"b333a13878ed6467afc644cc4a7fba8a",
        X"6fe1bd7b2bd57f1d247318da9d130d0a", X"babeb4db43e98bfa20a036758e06ead4", X"9b99ae3537b38828c33f629c27654c29", X"d6fe5e4c9f390bb6a5523bdaa7d672ce",
        X"46d6eb2ac8cf719a2f12eb3b24e43b6b", X"2136944a515be3f2c586e97599de219a", X"7a6982ded6aa1dfa91281fd5ec28196d", X"ea225519f1f55c7c16e4e2042546cf60",
        X"8264b4091f7515269929e1ae0304ba9e", X"2c009fa5c7f106bbb3c1825b2df6a2f6", X"03c6b7bc51586c46c24dabc28e5104c1", X"96a7aabc97aeaf611bdb8ecfba049814",
        X"6e6705040215fb0cc52b1723b77d8ca7", X"20afd57548c2a8194cae459746ef3ae2", X"c660367182530702a8940562e769aa34", X"426d334d0210953d4fbc5eb23baa5b89"
    );
    
    signal r_state_x : std_logic_vector(127 downto 0);
    signal r_state_y : std_logic_vector(128 * streams - 1 downto 0);
    
begin
    
    result <= r_state_y;
    
    process (clk)
        
        variable v_state_y : std_logic_vector(128 * streams - 1 downto 0);
        
        variable v_mixin : std_logic_vector(127 downto 0);
        variable v_mixup : std_logic_vector(127 downto 0);
        variable v_res : std_logic_vector(63 downto 0);
        
    begin
        if rising_edge(clk) then
            if reset = '1' then
                
                r_state_x <= seed_x;
                r_state_y <= seed_y;
                
            elsif enable = '1' then
                
                r_state_x(  0) <= r_state_x( 93) xor r_state_x( 67) xor r_state_x( 22) xor r_state_x(113) xor r_state_x( 35);
                r_state_x(  1) <= r_state_x( 38) xor r_state_x( 84) xor r_state_x( 91) xor r_state_x( 47) xor r_state_x( 95) xor r_state_x(124);
                r_state_x(  2) <= r_state_x(114) xor r_state_x( 68) xor r_state_x( 23) xor r_state_x(  3) xor r_state_x( 17);
                r_state_x(  3) <= r_state_x( 50) xor r_state_x( 29) xor r_state_x(127) xor r_state_x( 54) xor r_state_x( 20) xor r_state_x( 39);
                r_state_x(  4) <= r_state_x( 69) xor r_state_x( 19) xor r_state_x(  1) xor r_state_x(  7) xor r_state_x(108);
                r_state_x(  5) <= r_state_x( 77) xor r_state_x( 69) xor r_state_x( 43) xor r_state_x( 87) xor r_state_x( 28) xor r_state_x(121);
                r_state_x(  6) <= r_state_x(103) xor r_state_x( 62) xor r_state_x( 50) xor r_state_x( 96) xor r_state_x(118);
                r_state_x(  7) <= r_state_x(  6) xor r_state_x( 49) xor r_state_x(125) xor r_state_x( 63) xor r_state_x( 46) xor r_state_x( 87);
                r_state_x(  8) <= r_state_x( 92) xor r_state_x(  5) xor r_state_x( 45) xor r_state_x(  3) xor r_state_x( 95);
                r_state_x(  9) <= r_state_x( 55) xor r_state_x( 37) xor r_state_x( 10) xor r_state_x(101) xor r_state_x(107) xor r_state_x( 84);
                r_state_x( 10) <= r_state_x( 21) xor r_state_x( 32) xor r_state_x( 46) xor r_state_x( 19) xor r_state_x(113);
                r_state_x( 11) <= r_state_x(116) xor r_state_x( 34) xor r_state_x(  8) xor r_state_x( 41) xor r_state_x( 47) xor r_state_x( 93);
                r_state_x( 12) <= r_state_x( 37) xor r_state_x(125) xor r_state_x( 38) xor r_state_x(102) xor r_state_x( 40);
                r_state_x( 13) <= r_state_x( 72) xor r_state_x( 89) xor r_state_x(127) xor r_state_x( 31) xor r_state_x(113) xor r_state_x( 51);
                r_state_x( 14) <= r_state_x( 87) xor r_state_x(  6) xor r_state_x( 59) xor r_state_x(  3) xor r_state_x(  9);
                r_state_x( 15) <= r_state_x( 66) xor r_state_x(  5) xor r_state_x( 52) xor r_state_x( 18) xor r_state_x( 56) xor r_state_x( 75);
                r_state_x( 16) <= r_state_x( 28) xor r_state_x( 33) xor r_state_x( 14) xor r_state_x( 27) xor r_state_x( 98);
                r_state_x( 17) <= r_state_x(  7) xor r_state_x( 72) xor r_state_x(  9) xor r_state_x(  2) xor r_state_x( 30) xor r_state_x( 29);
                r_state_x( 18) <= r_state_x(106) xor r_state_x(110) xor r_state_x( 40) xor r_state_x( 98) xor r_state_x( 42);
                r_state_x( 19) <= r_state_x(100) xor r_state_x( 60) xor r_state_x( 30) xor r_state_x(105) xor r_state_x( 28) xor r_state_x( 50);
                r_state_x( 20) <= r_state_x( 63) xor r_state_x(  5) xor r_state_x( 51) xor r_state_x( 41) xor r_state_x( 57);
                r_state_x( 21) <= r_state_x(108) xor r_state_x( 12) xor r_state_x( 14) xor r_state_x( 35) xor r_state_x( 36) xor r_state_x( 96);
                r_state_x( 22) <= r_state_x( 56) xor r_state_x( 73) xor r_state_x( 62) xor r_state_x( 86) xor r_state_x( 26);
                r_state_x( 23) <= r_state_x( 58) xor r_state_x( 91) xor r_state_x(119) xor r_state_x( 44) xor r_state_x( 65) xor r_state_x( 89);
                r_state_x( 24) <= r_state_x( 34) xor r_state_x(123) xor r_state_x(100) xor r_state_x(111) xor r_state_x( 59);
                r_state_x( 25) <= r_state_x(124) xor r_state_x(119) xor r_state_x( 72) xor r_state_x( 61) xor r_state_x( 19) xor r_state_x( 63);
                r_state_x( 26) <= r_state_x(  5) xor r_state_x( 78) xor r_state_x(114) xor r_state_x( 27) xor r_state_x( 55);
                r_state_x( 27) <= r_state_x( 41) xor r_state_x( 32) xor r_state_x( 54) xor r_state_x( 52) xor r_state_x( 67) xor r_state_x( 11);
                r_state_x( 28) <= r_state_x( 33) xor r_state_x( 89) xor r_state_x(  7) xor r_state_x( 14) xor r_state_x( 71);
                r_state_x( 29) <= r_state_x(109) xor r_state_x( 17) xor r_state_x( 80) xor r_state_x( 94) xor r_state_x( 54) xor r_state_x( 11);
                r_state_x( 30) <= r_state_x(117) xor r_state_x( 29) xor r_state_x( 30) xor r_state_x( 33) xor r_state_x(  0);
                r_state_x( 31) <= r_state_x( 31) xor r_state_x( 85) xor r_state_x(127) xor r_state_x(102) xor r_state_x( 96) xor r_state_x( 95);
                r_state_x( 32) <= r_state_x( 80) xor r_state_x( 42) xor r_state_x( 82) xor r_state_x(101) xor r_state_x( 68);
                r_state_x( 33) <= r_state_x( 55) xor r_state_x( 85) xor r_state_x( 80) xor r_state_x( 95) xor r_state_x(105) xor r_state_x( 70);
                r_state_x( 34) <= r_state_x(122) xor r_state_x(116) xor r_state_x( 88) xor r_state_x( 41) xor r_state_x( 22);
                r_state_x( 35) <= r_state_x( 97) xor r_state_x(116) xor r_state_x( 36) xor r_state_x( 83) xor r_state_x( 82) xor r_state_x(123);
                r_state_x( 36) <= r_state_x( 21) xor r_state_x( 82) xor r_state_x( 54) xor r_state_x(111) xor r_state_x(101);
                r_state_x( 37) <= r_state_x( 99) xor r_state_x( 76) xor r_state_x(  8) xor r_state_x( 10) xor r_state_x( 48) xor r_state_x(126);
                r_state_x( 38) <= r_state_x(  8) xor r_state_x( 90) xor r_state_x( 48) xor r_state_x( 56) xor r_state_x(117);
                r_state_x( 39) <= r_state_x(111) xor r_state_x(120) xor r_state_x( 77) xor r_state_x( 53) xor r_state_x(123) xor r_state_x( 79);
                r_state_x( 40) <= r_state_x(104) xor r_state_x( 38) xor r_state_x(108) xor r_state_x(106) xor r_state_x(102);
                r_state_x( 41) <= r_state_x( 13) xor r_state_x( 26) xor r_state_x(118) xor r_state_x(120) xor r_state_x( 14) xor r_state_x( 73);
                r_state_x( 42) <= r_state_x( 24) xor r_state_x(122) xor r_state_x( 12) xor r_state_x(  1) xor r_state_x( 65);
                r_state_x( 43) <= r_state_x( 18) xor r_state_x( 33) xor r_state_x( 94) xor r_state_x( 76) xor r_state_x( 64) xor r_state_x(  4);
                r_state_x( 44) <= r_state_x(  9) xor r_state_x(102) xor r_state_x( 31) xor r_state_x( 24) xor r_state_x( 86);
                r_state_x( 45) <= r_state_x( 16) xor r_state_x( 45) xor r_state_x( 39) xor r_state_x( 31) xor r_state_x( 67) xor r_state_x(108);
                r_state_x( 46) <= r_state_x( 33) xor r_state_x( 58) xor r_state_x(  0) xor r_state_x( 81) xor r_state_x( 93);
                r_state_x( 47) <= r_state_x( 63) xor r_state_x(110) xor r_state_x( 74) xor r_state_x( 56) xor r_state_x( 47) xor r_state_x( 23);
                r_state_x( 48) <= r_state_x( 96) xor r_state_x( 37) xor r_state_x( 32) xor r_state_x( 56) xor r_state_x( 97);
                r_state_x( 49) <= r_state_x( 35) xor r_state_x( 18) xor r_state_x( 93) xor r_state_x( 12) xor r_state_x(105) xor r_state_x(121);
                r_state_x( 50) <= r_state_x(  2) xor r_state_x(112) xor r_state_x(117) xor r_state_x( 76) xor r_state_x( 51);
                r_state_x( 51) <= r_state_x(  6) xor r_state_x(106) xor r_state_x(110) xor r_state_x( 68) xor r_state_x( 13) xor r_state_x( 15);
                r_state_x( 52) <= r_state_x( 12) xor r_state_x( 76) xor r_state_x(107) xor r_state_x( 16) xor r_state_x(121);
                r_state_x( 53) <= r_state_x(124) xor r_state_x( 95) xor r_state_x( 85) xor r_state_x( 28) xor r_state_x( 13) xor r_state_x(  6);
                r_state_x( 54) <= r_state_x(123) xor r_state_x( 28) xor r_state_x(  5) xor r_state_x( 61) xor r_state_x( 59);
                r_state_x( 55) <= r_state_x( 26) xor r_state_x( 76) xor r_state_x( 30) xor r_state_x( 99) xor r_state_x( 25) xor r_state_x( 16);
                r_state_x( 56) <= r_state_x( 66) xor r_state_x( 89) xor r_state_x(122) xor r_state_x( 79) xor r_state_x(103);
                r_state_x( 57) <= r_state_x(107) xor r_state_x( 15) xor r_state_x( 29) xor r_state_x( 34) xor r_state_x( 83) xor r_state_x(116);
                r_state_x( 58) <= r_state_x( 16) xor r_state_x( 53) xor r_state_x(107) xor r_state_x( 98) xor r_state_x( 37);
                r_state_x( 59) <= r_state_x( 49) xor r_state_x(104) xor r_state_x( 94) xor r_state_x(109) xor r_state_x(112) xor r_state_x( 79);
                r_state_x( 60) <= r_state_x( 12) xor r_state_x( 57) xor r_state_x( 61) xor r_state_x( 70) xor r_state_x( 20);
                r_state_x( 61) <= r_state_x( 29) xor r_state_x( 97) xor r_state_x( 71) xor r_state_x( 78) xor r_state_x( 53) xor r_state_x( 74);
                r_state_x( 62) <= r_state_x( 16) xor r_state_x(108) xor r_state_x(111) xor r_state_x( 90) xor r_state_x(  1);
                r_state_x( 63) <= r_state_x( 59) xor r_state_x( 91) xor r_state_x(114) xor r_state_x(122) xor r_state_x( 50) xor r_state_x( 99);
                r_state_x( 64) <= r_state_x(113) xor r_state_x(125) xor r_state_x( 26) xor r_state_x( 57) xor r_state_x( 51);
                r_state_x( 65) <= r_state_x(100) xor r_state_x( 85) xor r_state_x(114) xor r_state_x( 86) xor r_state_x(106) xor r_state_x(121);
                r_state_x( 66) <= r_state_x( 81) xor r_state_x( 21) xor r_state_x( 42) xor r_state_x(  9) xor r_state_x( 15);
                r_state_x( 67) <= r_state_x( 63) xor r_state_x(127) xor r_state_x( 45) xor r_state_x( 18) xor r_state_x( 13) xor r_state_x( 74);
                r_state_x( 68) <= r_state_x( 53) xor r_state_x( 55) xor r_state_x(  2) xor r_state_x( 46) xor r_state_x( 84);
                r_state_x( 69) <= r_state_x( 29) xor r_state_x( 67) xor r_state_x( 62) xor r_state_x(125) xor r_state_x(127) xor r_state_x( 84);
                r_state_x( 70) <= r_state_x(  8) xor r_state_x( 55) xor r_state_x( 78) xor r_state_x( 53) xor r_state_x( 41);
                r_state_x( 71) <= r_state_x( 11) xor r_state_x( 81) xor r_state_x( 37) xor r_state_x(125) xor r_state_x( 32) xor r_state_x( 61);
                r_state_x( 72) <= r_state_x( 94) xor r_state_x( 82) xor r_state_x( 91) xor r_state_x( 58) xor r_state_x( 46);
                r_state_x( 73) <= r_state_x( 43) xor r_state_x( 15) xor r_state_x(119) xor r_state_x( 47) xor r_state_x( 87) xor r_state_x( 62);
                r_state_x( 74) <= r_state_x(126) xor r_state_x( 85) xor r_state_x( 82) xor r_state_x( 93) xor r_state_x( 90);
                r_state_x( 75) <= r_state_x( 15) xor r_state_x( 99) xor r_state_x( 59) xor r_state_x(  4) xor r_state_x( 65) xor r_state_x(  0);
                r_state_x( 76) <= r_state_x( 64) xor r_state_x( 17) xor r_state_x( 12) xor r_state_x( 10) xor r_state_x(120);
                r_state_x( 77) <= r_state_x(  1) xor r_state_x( 31) xor r_state_x(115) xor r_state_x( 45) xor r_state_x( 43) xor r_state_x( 64);
                r_state_x( 78) <= r_state_x(123) xor r_state_x( 24) xor r_state_x(  7) xor r_state_x( 66) xor r_state_x( 73);
                r_state_x( 79) <= r_state_x(103) xor r_state_x( 39) xor r_state_x( 54) xor r_state_x( 59) xor r_state_x( 74) xor r_state_x( 78);
                r_state_x( 80) <= r_state_x( 53) xor r_state_x( 12) xor r_state_x( 57) xor r_state_x(100) xor r_state_x(115);
                r_state_x( 81) <= r_state_x(107) xor r_state_x( 39) xor r_state_x( 80) xor r_state_x( 75) xor r_state_x( 94) xor r_state_x( 49);
                r_state_x( 82) <= r_state_x( 25) xor r_state_x(  1) xor r_state_x( 88) xor r_state_x(124) xor r_state_x( 58);
                r_state_x( 83) <= r_state_x( 75) xor r_state_x(103) xor r_state_x( 86) xor r_state_x( 79) xor r_state_x( 88) xor r_state_x( 28);
                r_state_x( 84) <= r_state_x( 19) xor r_state_x( 40) xor r_state_x( 88) xor r_state_x( 24) xor r_state_x(118);
                r_state_x( 85) <= r_state_x( 83) xor r_state_x( 77) xor r_state_x( 97) xor r_state_x( 50) xor r_state_x( 10) xor r_state_x(118);
                r_state_x( 86) <= r_state_x(126) xor r_state_x(112) xor r_state_x( 64) xor r_state_x(107) xor r_state_x( 88);
                r_state_x( 87) <= r_state_x( 83) xor r_state_x( 25) xor r_state_x( 40) xor r_state_x( 20) xor r_state_x(  2) xor r_state_x( 75);
                r_state_x( 88) <= r_state_x( 32) xor r_state_x( 37) xor r_state_x(111) xor r_state_x( 51) xor r_state_x( 99);
                r_state_x( 89) <= r_state_x( 11) xor r_state_x(120) xor r_state_x( 18) xor r_state_x( 84) xor r_state_x( 26) xor r_state_x( 52);
                r_state_x( 90) <= r_state_x(123) xor r_state_x(101) xor r_state_x( 66) xor r_state_x( 68) xor r_state_x(  1);
                r_state_x( 91) <= r_state_x(  8) xor r_state_x( 68) xor r_state_x(123) xor r_state_x(116) xor r_state_x( 23) xor r_state_x(122);
                r_state_x( 92) <= r_state_x( 56) xor r_state_x( 31) xor r_state_x( 78) xor r_state_x( 36) xor r_state_x( 42);
                r_state_x( 93) <= r_state_x( 38) xor r_state_x( 40) xor r_state_x( 89) xor r_state_x(  4) xor r_state_x(111) xor r_state_x( 73);
                r_state_x( 94) <= r_state_x( 63) xor r_state_x(118) xor r_state_x(109) xor r_state_x( 46) xor r_state_x( 44);
                r_state_x( 95) <= r_state_x( 92) xor r_state_x( 53) xor r_state_x(110) xor r_state_x( 52) xor r_state_x(119) xor r_state_x( 40);
                r_state_x( 96) <= r_state_x( 69) xor r_state_x(  2) xor r_state_x( 72) xor r_state_x(  3) xor r_state_x(120);
                r_state_x( 97) <= r_state_x( 43) xor r_state_x( 17) xor r_state_x( 14) xor r_state_x(106) xor r_state_x(122) xor r_state_x( 69);
                r_state_x( 98) <= r_state_x( 70) xor r_state_x( 41) xor r_state_x( 60) xor r_state_x( 51) xor r_state_x( 13);
                r_state_x( 99) <= r_state_x( 18) xor r_state_x( 74) xor r_state_x( 75) xor r_state_x(100) xor r_state_x( 61) xor r_state_x( 60);
                r_state_x(100) <= r_state_x(115) xor r_state_x( 38) xor r_state_x( 92) xor r_state_x( 65) xor r_state_x(  4);
                r_state_x(101) <= r_state_x( 75) xor r_state_x( 34) xor r_state_x( 44) xor r_state_x( 72) xor r_state_x( 79) xor r_state_x( 63);
                r_state_x(102) <= r_state_x( 57) xor r_state_x(  2) xor r_state_x( 20) xor r_state_x( 79) xor r_state_x( 27);
                r_state_x(103) <= r_state_x( 45) xor r_state_x( 35) xor r_state_x(109) xor r_state_x( 49) xor r_state_x( 39) xor r_state_x( 96);
                r_state_x(104) <= r_state_x( 20) xor r_state_x( 90) xor r_state_x(103) xor r_state_x( 60) xor r_state_x(117);
                r_state_x(105) <= r_state_x(  6) xor r_state_x(  3) xor r_state_x( 79) xor r_state_x(115) xor r_state_x(  8) xor r_state_x( 81);
                r_state_x(106) <= r_state_x(102) xor r_state_x( 36) xor r_state_x( 83) xor r_state_x(112) xor r_state_x( 71);
                r_state_x(107) <= r_state_x( 42) xor r_state_x(126) xor r_state_x( 62) xor r_state_x(113) xor r_state_x( 43) xor r_state_x( 30);
                r_state_x(108) <= r_state_x( 50) xor r_state_x( 69) xor r_state_x( 35) xor r_state_x( 47) xor r_state_x(113);
                r_state_x(109) <= r_state_x(104) xor r_state_x( 23) xor r_state_x( 65) xor r_state_x( 77) xor r_state_x( 67) xor r_state_x(117);
                r_state_x(110) <= r_state_x( 44) xor r_state_x( 68) xor r_state_x(  0) xor r_state_x( 80) xor r_state_x( 19);
                r_state_x(111) <= r_state_x( 20) xor r_state_x( 27) xor r_state_x(114) xor r_state_x(105) xor r_state_x(101) xor r_state_x( 66);
                r_state_x(112) <= r_state_x( 43) xor r_state_x(119) xor r_state_x(116) xor r_state_x(109) xor r_state_x( 21);
                r_state_x(113) <= r_state_x(116) xor r_state_x( 70) xor r_state_x(  0) xor r_state_x(105) xor r_state_x( 71) xor r_state_x(  4);
                r_state_x(114) <= r_state_x( 72) xor r_state_x( 22) xor r_state_x(115) xor r_state_x( 43) xor r_state_x( 34);
                r_state_x(115) <= r_state_x( 91) xor r_state_x( 21) xor r_state_x( 45) xor r_state_x(104) xor r_state_x( 74) xor r_state_x(105);
                r_state_x(116) <= r_state_x( 58) xor r_state_x(103) xor r_state_x( 30) xor r_state_x( 13) xor r_state_x(108);
                r_state_x(117) <= r_state_x(  5) xor r_state_x( 97) xor r_state_x( 71) xor r_state_x(  0) xor r_state_x( 47) xor r_state_x(  9);
                r_state_x(118) <= r_state_x( 22) xor r_state_x( 35) xor r_state_x(124) xor r_state_x(126) xor r_state_x(120);
                r_state_x(119) <= r_state_x( 52) xor r_state_x( 66) xor r_state_x(106) xor r_state_x( 11) xor r_state_x(104) xor r_state_x( 17);
                r_state_x(120) <= r_state_x( 38) xor r_state_x( 64) xor r_state_x(  7) xor r_state_x(102) xor r_state_x( 24);
                r_state_x(121) <= r_state_x( 10) xor r_state_x( 90) xor r_state_x( 25) xor r_state_x( 81) xor r_state_x( 92) xor r_state_x( 77);
                r_state_x(122) <= r_state_x( 19) xor r_state_x( 60) xor r_state_x( 87) xor r_state_x( 92) xor r_state_x( 48);
                r_state_x(123) <= r_state_x( 11) xor r_state_x( 95) xor r_state_x( 27) xor r_state_x( 36) xor r_state_x( 22) xor r_state_x( 98);
                r_state_x(124) <= r_state_x(  9) xor r_state_x( 23) xor r_state_x( 81) xor r_state_x( 44) xor r_state_x( 93);
                r_state_x(125) <= r_state_x( 49) xor r_state_x( 73) xor r_state_x( 88) xor r_state_x( 98) xor r_state_x(112) xor r_state_x(121);
                r_state_x(126) <= r_state_x( 48) xor r_state_x( 70) xor r_state_x( 86) xor r_state_x( 23) xor r_state_x( 59);
                r_state_x(127) <= r_state_x( 97) xor r_state_x( 29) xor r_state_x( 48) xor r_state_x(110) xor r_state_x( 34) xor r_state_x(107);
                
                for i in 0 to streams - 1 loop
                    v_mixin := r_state_x xor salts(i);
                    v_mixup := r_state_y(128 * ((i + 1) mod streams) + 127 downto 128 * ((i + 1) mod streams));
                    v_res(  0) := v_mixup(  0) xor (v_mixup( 47) and not v_mixup( 61)) xor v_mixup( 56) xor v_mixup( 62) xor v_mixin((i +  68) mod 128);
                    v_res(  1) := v_mixup(  1) xor (v_mixup( 48) and not v_mixup( 62)) xor v_mixup( 57) xor v_mixup( 63) xor v_mixin((i +  77) mod 128);
                    v_res(  2) := v_mixup(  2) xor (v_mixup( 49) and not v_mixup( 63)) xor v_mixup( 58) xor v_mixup( 64) xor v_mixin((i +  52) mod 128);
                    v_res(  3) := v_mixup(  3) xor (v_mixup( 50) and not v_mixup( 64)) xor v_mixup( 59) xor v_mixup( 65) xor v_mixin((i + 101) mod 128);
                    v_res(  4) := v_mixup(  4) xor (v_mixup( 51) and not v_mixup( 65)) xor v_mixup( 60) xor v_mixup( 66) xor v_mixin((i + 107) mod 128);
                    v_res(  5) := v_mixup(  5) xor (v_mixup( 52) and not v_mixup( 66)) xor v_mixup( 61) xor v_mixup( 67) xor v_mixin((i + 124) mod 128);
                    v_res(  6) := v_mixup(  6) xor (v_mixup( 53) and not v_mixup( 67)) xor v_mixup( 62) xor v_mixup( 68) xor v_mixin((i + 117) mod 128);
                    v_res(  7) := v_mixup(  7) xor (v_mixup( 54) and not v_mixup( 68)) xor v_mixup( 63) xor v_mixup( 69) xor v_mixin((i + 113) mod 128);
                    v_res(  8) := v_mixup(  8) xor (v_mixup( 55) and not v_mixup( 69)) xor v_mixup( 64) xor v_mixup( 70) xor v_mixin((i +  96) mod 128);
                    v_res(  9) := v_mixup(  9) xor (v_mixup( 56) and not v_mixup( 70)) xor v_mixup( 65) xor v_mixup( 71) xor v_mixin((i +  92) mod 128);
                    v_res( 10) := v_mixup( 10) xor (v_mixup( 57) and not v_mixup( 71)) xor v_mixup( 66) xor v_mixup( 72) xor v_mixin((i +   7) mod 128);
                    v_res( 11) := v_mixup( 11) xor (v_mixup( 58) and not v_mixup( 72)) xor v_mixup( 67) xor v_mixup( 73) xor v_mixin((i +  25) mod 128);
                    v_res( 12) := v_mixup( 12) xor (v_mixup( 59) and not v_mixup( 73)) xor v_mixup( 68) xor v_mixup( 74) xor v_mixin((i +  21) mod 128);
                    v_res( 13) := v_mixup( 13) xor (v_mixup( 60) and not v_mixup( 74)) xor v_mixup( 69) xor v_mixup( 75) xor v_mixin((i +  28) mod 128);
                    v_res( 14) := v_mixup( 14) xor (v_mixup( 61) and not v_mixup( 75)) xor v_mixup( 70) xor v_mixup( 76) xor v_mixin((i +  60) mod 128);
                    v_res( 15) := v_mixup( 15) xor (v_mixup( 62) and not v_mixup( 76)) xor v_mixup( 71) xor v_mixup( 77) xor v_mixin((i +   1) mod 128);
                    v_res( 16) := v_mixup( 16) xor (v_mixup( 63) and not v_mixup( 77)) xor v_mixup( 72) xor v_mixup( 78) xor v_mixin((i +  17) mod 128);
                    v_res( 17) := v_mixup( 17) xor (v_mixup( 64) and not v_mixup( 78)) xor v_mixup( 73) xor v_mixup( 79) xor v_mixin((i +  26) mod 128);
                    v_res( 18) := v_mixup( 18) xor (v_mixup( 65) and not v_mixup( 79)) xor v_mixup( 74) xor v_mixup( 80) xor v_mixin((i +  44) mod 128);
                    v_res( 19) := v_mixup( 19) xor (v_mixup( 66) and not v_mixup( 80)) xor v_mixup( 75) xor v_mixup( 81) xor v_mixin((i +  27) mod 128);
                    v_res( 20) := v_mixup( 20) xor (v_mixup( 67) and not v_mixup( 81)) xor v_mixup( 76) xor v_mixup( 82) xor v_mixin((i +  59) mod 128);
                    v_res( 21) := v_mixup( 21) xor (v_mixup( 68) and not v_mixup( 82)) xor v_mixup( 77) xor v_mixup( 83) xor v_mixin((i + 127) mod 128);
                    v_res( 22) := v_mixup( 22) xor (v_mixup( 69) and not v_mixup( 83)) xor v_mixup( 78) xor v_mixup( 84) xor v_mixin((i +  46) mod 128);
                    v_res( 23) := v_mixup( 23) xor (v_mixup( 70) and not v_mixup( 84)) xor v_mixup( 79) xor v_mixup( 85) xor v_mixin((i + 110) mod 128);
                    v_res( 24) := v_mixup( 24) xor (v_mixup( 71) and not v_mixup( 85)) xor v_mixup( 80) xor v_mixup( 86) xor v_mixin((i +  83) mod 128);
                    v_res( 25) := v_mixup( 25) xor (v_mixup( 72) and not v_mixup( 86)) xor v_mixup( 81) xor v_mixup( 87) xor v_mixin((i +  98) mod 128);
                    v_res( 26) := v_mixup( 26) xor (v_mixup( 73) and not v_mixup( 87)) xor v_mixup( 82) xor v_mixup( 88) xor v_mixin((i +  54) mod 128);
                    v_res( 27) := v_mixup( 27) xor (v_mixup( 74) and not v_mixup( 88)) xor v_mixup( 83) xor v_mixup( 89) xor v_mixin((i + 126) mod 128);
                    v_res( 28) := v_mixup( 28) xor (v_mixup( 75) and not v_mixup( 89)) xor v_mixup( 84) xor v_mixup( 90) xor v_mixin((i +  29) mod 128);
                    v_res( 29) := v_mixup( 29) xor (v_mixup( 76) and not v_mixup( 90)) xor v_mixup( 85) xor v_mixup( 91) xor v_mixin((i +  95) mod 128);
                    v_res( 30) := v_mixup( 30) xor (v_mixup( 77) and not v_mixup( 91)) xor v_mixup( 86) xor v_mixup( 92) xor v_mixin((i +   0) mod 128);
                    v_res( 31) := v_mixup( 31) xor (v_mixup( 78) and not v_mixup( 92)) xor v_mixup( 87) xor v_mixup( 93) xor v_mixin((i +  20) mod 128);
                    v_res( 32) := v_mixup( 32) xor (v_mixup( 79) and not v_mixup( 93)) xor v_mixup( 88) xor v_mixup( 94) xor v_mixin((i +  66) mod 128);
                    v_res( 33) := v_mixup( 33) xor (v_mixup( 80) and not v_mixup( 94)) xor v_mixup( 89) xor v_mixup( 95) xor v_mixin((i +  89) mod 128);
                    v_res( 34) := v_mixup( 34) xor (v_mixup( 81) and not v_mixup( 95)) xor v_mixup( 90) xor v_mixup( 96) xor v_mixin((i +   9) mod 128);
                    v_res( 35) := v_mixup( 35) xor (v_mixup( 82) and not v_mixup( 96)) xor v_mixup( 91) xor v_mixup( 97) xor v_mixin((i +  19) mod 128);
                    v_res( 36) := v_mixup( 36) xor (v_mixup( 83) and not v_mixup( 97)) xor v_mixup( 92) xor v_mixup( 98) xor v_mixin((i +  91) mod 128);
                    v_res( 37) := v_mixup( 37) xor (v_mixup( 84) and not v_mixup( 98)) xor v_mixup( 93) xor v_mixup( 99) xor v_mixin((i +  10) mod 128);
                    v_res( 38) := v_mixup( 38) xor (v_mixup( 85) and not v_mixup( 99)) xor v_mixup( 94) xor v_mixup(100) xor v_mixin((i +  58) mod 128);
                    v_res( 39) := v_mixup( 39) xor (v_mixup( 86) and not v_mixup(100)) xor v_mixup( 95) xor v_mixup(101) xor v_mixin((i + 120) mod 128);
                    v_res( 40) := v_mixup( 40) xor (v_mixup( 87) and not v_mixup(101)) xor v_mixup( 96) xor v_mixup(102) xor v_mixin((i +  11) mod 128);
                    v_res( 41) := v_mixup( 41) xor (v_mixup( 88) and not v_mixup(102)) xor v_mixup( 97) xor v_mixup(103) xor v_mixin((i + 100) mod 128);
                    v_res( 42) := v_mixup( 42) xor (v_mixup( 89) and not v_mixup(103)) xor v_mixup( 98) xor v_mixup(104) xor v_mixin((i +  49) mod 128);
                    v_res( 43) := v_mixup( 43) xor (v_mixup( 90) and not v_mixup(104)) xor v_mixup( 99) xor v_mixup(105) xor v_mixin((i +  82) mod 128);
                    v_res( 44) := v_mixup( 44) xor (v_mixup( 91) and not v_mixup(105)) xor v_mixup(100) xor v_mixup(106) xor v_mixin((i +  75) mod 128);
                    v_res( 45) := v_mixup( 45) xor (v_mixup( 92) and not v_mixup(106)) xor v_mixup(101) xor v_mixup(107) xor v_mixin((i +  16) mod 128);
                    v_res( 46) := v_mixup( 46) xor (v_mixup( 93) and not v_mixup(107)) xor v_mixup(102) xor v_mixup(108) xor v_mixin((i +  36) mod 128);
                    v_res( 47) := v_mixup( 47) xor (v_mixup( 94) and not v_mixup(108)) xor v_mixup(103) xor v_mixup(109) xor v_mixin((i + 103) mod 128);
                    v_res( 48) := v_mixup( 48) xor (v_mixup( 95) and not v_mixup(109)) xor v_mixup(104) xor v_mixup(110) xor v_mixin((i +  62) mod 128);
                    v_res( 49) := v_mixup( 49) xor (v_mixup( 96) and not v_mixup(110)) xor v_mixup(105) xor v_mixup(111) xor v_mixin((i +  50) mod 128);
                    v_res( 50) := v_mixup( 50) xor (v_mixup( 97) and not v_mixup(111)) xor v_mixup(106) xor v_mixup(112) xor v_mixin((i +  65) mod 128);
                    v_res( 51) := v_mixup( 51) xor (v_mixup( 98) and not v_mixup(112)) xor v_mixup(107) xor v_mixup(113) xor v_mixin((i + 112) mod 128);
                    v_res( 52) := v_mixup( 52) xor (v_mixup( 99) and not v_mixup(113)) xor v_mixup(108) xor v_mixup(114) xor v_mixin((i +  24) mod 128);
                    v_res( 53) := v_mixup( 53) xor (v_mixup(100) and not v_mixup(114)) xor v_mixup(109) xor v_mixup(115) xor v_mixin((i +  33) mod 128);
                    v_res( 54) := v_mixup( 54) xor (v_mixup(101) and not v_mixup(115)) xor v_mixup(110) xor v_mixup(116) xor v_mixin((i +  51) mod 128);
                    v_res( 55) := v_mixup( 55) xor (v_mixup(102) and not v_mixup(116)) xor v_mixup(111) xor v_mixup(117) xor v_mixin((i +  86) mod 128);
                    v_res( 56) := v_mixup( 56) xor (v_mixup(103) and not v_mixup(117)) xor v_mixup(112) xor v_mixup(118) xor v_mixin((i +  40) mod 128);
                    v_res( 57) := v_mixup( 57) xor (v_mixup(104) and not v_mixup(118)) xor v_mixup(113) xor v_mixup(119) xor v_mixin((i + 102) mod 128);
                    v_res( 58) := v_mixup( 58) xor (v_mixup(105) and not v_mixup(119)) xor v_mixup(114) xor v_mixup(120) xor v_mixin((i +  48) mod 128);
                    v_res( 59) := v_mixup( 59) xor (v_mixup(106) and not v_mixup(120)) xor v_mixup(115) xor v_mixup(121) xor v_mixin((i +  81) mod 128);
                    v_res( 60) := v_mixup( 60) xor (v_mixup(107) and not v_mixup(121)) xor v_mixup(116) xor v_mixup(122) xor v_mixin((i + 125) mod 128);
                    v_res( 61) := v_mixup( 61) xor (v_mixup(108) and not v_mixup(122)) xor v_mixup(117) xor v_mixup(123) xor v_mixin((i +  34) mod 128);
                    v_res( 62) := v_mixup( 62) xor (v_mixup(109) and not v_mixup(123)) xor v_mixup(118) xor v_mixup(124) xor v_mixin((i +  56) mod 128);
                    v_res( 63) := v_mixup( 63) xor (v_mixup(110) and not v_mixup(124)) xor v_mixup(119) xor v_mixup(125) xor v_mixin((i +  73) mod 128);
                    v_state_y(128 * i + 127 downto 128 * i) := v_res & r_state_y(128 * i + 127 downto 128 * i + 64);
                end loop;
                
                for i in 0 to streams - 1 loop
                    v_mixin := r_state_x xor salts(i);
                    v_mixup := v_state_y(128 * ((i + 1) mod streams) + 127 downto 128 * ((i + 1) mod streams));
                    v_res(  0) := v_mixup(  0) xor (v_mixup( 47) and not v_mixup( 61)) xor v_mixup( 56) xor v_mixup( 62) xor v_mixin((i +  32) mod 128);
                    v_res(  1) := v_mixup(  1) xor (v_mixup( 48) and not v_mixup( 62)) xor v_mixup( 57) xor v_mixup( 63) xor v_mixin((i + 118) mod 128);
                    v_res(  2) := v_mixup(  2) xor (v_mixup( 49) and not v_mixup( 63)) xor v_mixup( 58) xor v_mixup( 64) xor v_mixin((i +  78) mod 128);
                    v_res(  3) := v_mixup(  3) xor (v_mixup( 50) and not v_mixup( 64)) xor v_mixup( 59) xor v_mixup( 65) xor v_mixin((i +  69) mod 128);
                    v_res(  4) := v_mixup(  4) xor (v_mixup( 51) and not v_mixup( 65)) xor v_mixup( 60) xor v_mixup( 66) xor v_mixin((i +  45) mod 128);
                    v_res(  5) := v_mixup(  5) xor (v_mixup( 52) and not v_mixup( 66)) xor v_mixup( 61) xor v_mixup( 67) xor v_mixin((i +   6) mod 128);
                    v_res(  6) := v_mixup(  6) xor (v_mixup( 53) and not v_mixup( 67)) xor v_mixup( 62) xor v_mixup( 68) xor v_mixin((i +  93) mod 128);
                    v_res(  7) := v_mixup(  7) xor (v_mixup( 54) and not v_mixup( 68)) xor v_mixup( 63) xor v_mixup( 69) xor v_mixin((i +  53) mod 128);
                    v_res(  8) := v_mixup(  8) xor (v_mixup( 55) and not v_mixup( 69)) xor v_mixup( 64) xor v_mixup( 70) xor v_mixin((i + 116) mod 128);
                    v_res(  9) := v_mixup(  9) xor (v_mixup( 56) and not v_mixup( 70)) xor v_mixup( 65) xor v_mixup( 71) xor v_mixin((i +  84) mod 128);
                    v_res( 10) := v_mixup( 10) xor (v_mixup( 57) and not v_mixup( 71)) xor v_mixup( 66) xor v_mixup( 72) xor v_mixin((i +   3) mod 128);
                    v_res( 11) := v_mixup( 11) xor (v_mixup( 58) and not v_mixup( 72)) xor v_mixup( 67) xor v_mixup( 73) xor v_mixin((i +  97) mod 128);
                    v_res( 12) := v_mixup( 12) xor (v_mixup( 59) and not v_mixup( 73)) xor v_mixup( 68) xor v_mixup( 74) xor v_mixin((i +  99) mod 128);
                    v_res( 13) := v_mixup( 13) xor (v_mixup( 60) and not v_mixup( 74)) xor v_mixup( 69) xor v_mixup( 75) xor v_mixin((i +  39) mod 128);
                    v_res( 14) := v_mixup( 14) xor (v_mixup( 61) and not v_mixup( 75)) xor v_mixup( 70) xor v_mixup( 76) xor v_mixin((i +  70) mod 128);
                    v_res( 15) := v_mixup( 15) xor (v_mixup( 62) and not v_mixup( 76)) xor v_mixup( 71) xor v_mixup( 77) xor v_mixin((i + 119) mod 128);
                    v_res( 16) := v_mixup( 16) xor (v_mixup( 63) and not v_mixup( 77)) xor v_mixup( 72) xor v_mixup( 78) xor v_mixin((i +  72) mod 128);
                    v_res( 17) := v_mixup( 17) xor (v_mixup( 64) and not v_mixup( 78)) xor v_mixup( 73) xor v_mixup( 79) xor v_mixin((i +  14) mod 128);
                    v_res( 18) := v_mixup( 18) xor (v_mixup( 65) and not v_mixup( 79)) xor v_mixup( 74) xor v_mixup( 80) xor v_mixin((i +  64) mod 128);
                    v_res( 19) := v_mixup( 19) xor (v_mixup( 66) and not v_mixup( 80)) xor v_mixup( 75) xor v_mixup( 81) xor v_mixin((i + 121) mod 128);
                    v_res( 20) := v_mixup( 20) xor (v_mixup( 67) and not v_mixup( 81)) xor v_mixup( 76) xor v_mixup( 82) xor v_mixin((i +  76) mod 128);
                    v_res( 21) := v_mixup( 21) xor (v_mixup( 68) and not v_mixup( 82)) xor v_mixup( 77) xor v_mixup( 83) xor v_mixin((i +  22) mod 128);
                    v_res( 22) := v_mixup( 22) xor (v_mixup( 69) and not v_mixup( 83)) xor v_mixup( 78) xor v_mixup( 84) xor v_mixin((i + 104) mod 128);
                    v_res( 23) := v_mixup( 23) xor (v_mixup( 70) and not v_mixup( 84)) xor v_mixup( 79) xor v_mixup( 85) xor v_mixin((i +  63) mod 128);
                    v_res( 24) := v_mixup( 24) xor (v_mixup( 71) and not v_mixup( 85)) xor v_mixup( 80) xor v_mixup( 86) xor v_mixin((i + 106) mod 128);
                    v_res( 25) := v_mixup( 25) xor (v_mixup( 72) and not v_mixup( 86)) xor v_mixup( 81) xor v_mixup( 87) xor v_mixin((i +  15) mod 128);
                    v_res( 26) := v_mixup( 26) xor (v_mixup( 73) and not v_mixup( 87)) xor v_mixup( 82) xor v_mixup( 88) xor v_mixin((i +   2) mod 128);
                    v_res( 27) := v_mixup( 27) xor (v_mixup( 74) and not v_mixup( 88)) xor v_mixup( 83) xor v_mixup( 89) xor v_mixin((i +  42) mod 128);
                    v_res( 28) := v_mixup( 28) xor (v_mixup( 75) and not v_mixup( 89)) xor v_mixup( 84) xor v_mixup( 90) xor v_mixin((i +  41) mod 128);
                    v_res( 29) := v_mixup( 29) xor (v_mixup( 76) and not v_mixup( 90)) xor v_mixup( 85) xor v_mixup( 91) xor v_mixin((i +  18) mod 128);
                    v_res( 30) := v_mixup( 30) xor (v_mixup( 77) and not v_mixup( 91)) xor v_mixup( 86) xor v_mixup( 92) xor v_mixin((i + 123) mod 128);
                    v_res( 31) := v_mixup( 31) xor (v_mixup( 78) and not v_mixup( 92)) xor v_mixup( 87) xor v_mixup( 93) xor v_mixin((i + 114) mod 128);
                    v_res( 32) := v_mixup( 32) xor (v_mixup( 79) and not v_mixup( 93)) xor v_mixup( 88) xor v_mixup( 94) xor v_mixin((i +   8) mod 128);
                    v_res( 33) := v_mixup( 33) xor (v_mixup( 80) and not v_mixup( 94)) xor v_mixup( 89) xor v_mixup( 95) xor v_mixin((i + 115) mod 128);
                    v_res( 34) := v_mixup( 34) xor (v_mixup( 81) and not v_mixup( 95)) xor v_mixup( 90) xor v_mixup( 96) xor v_mixin((i + 108) mod 128);
                    v_res( 35) := v_mixup( 35) xor (v_mixup( 82) and not v_mixup( 96)) xor v_mixup( 91) xor v_mixup( 97) xor v_mixin((i +  85) mod 128);
                    v_res( 36) := v_mixup( 36) xor (v_mixup( 83) and not v_mixup( 97)) xor v_mixup( 92) xor v_mixup( 98) xor v_mixin((i +  80) mod 128);
                    v_res( 37) := v_mixup( 37) xor (v_mixup( 84) and not v_mixup( 98)) xor v_mixup( 93) xor v_mixup( 99) xor v_mixin((i +  37) mod 128);
                    v_res( 38) := v_mixup( 38) xor (v_mixup( 85) and not v_mixup( 99)) xor v_mixup( 94) xor v_mixup(100) xor v_mixin((i +  35) mod 128);
                    v_res( 39) := v_mixup( 39) xor (v_mixup( 86) and not v_mixup(100)) xor v_mixup( 95) xor v_mixup(101) xor v_mixin((i +  13) mod 128);
                    v_res( 40) := v_mixup( 40) xor (v_mixup( 87) and not v_mixup(101)) xor v_mixup( 96) xor v_mixup(102) xor v_mixin((i +  30) mod 128);
                    v_res( 41) := v_mixup( 41) xor (v_mixup( 88) and not v_mixup(102)) xor v_mixup( 97) xor v_mixup(103) xor v_mixin((i +  87) mod 128);
                    v_res( 42) := v_mixup( 42) xor (v_mixup( 89) and not v_mixup(103)) xor v_mixup( 98) xor v_mixup(104) xor v_mixin((i +  79) mod 128);
                    v_res( 43) := v_mixup( 43) xor (v_mixup( 90) and not v_mixup(104)) xor v_mixup( 99) xor v_mixup(105) xor v_mixin((i +  61) mod 128);
                    v_res( 44) := v_mixup( 44) xor (v_mixup( 91) and not v_mixup(105)) xor v_mixup(100) xor v_mixup(106) xor v_mixin((i +   4) mod 128);
                    v_res( 45) := v_mixup( 45) xor (v_mixup( 92) and not v_mixup(106)) xor v_mixup(101) xor v_mixup(107) xor v_mixin((i + 109) mod 128);
                    v_res( 46) := v_mixup( 46) xor (v_mixup( 93) and not v_mixup(107)) xor v_mixup(102) xor v_mixup(108) xor v_mixin((i + 111) mod 128);
                    v_res( 47) := v_mixup( 47) xor (v_mixup( 94) and not v_mixup(108)) xor v_mixup(103) xor v_mixup(109) xor v_mixin((i +  43) mod 128);
                    v_res( 48) := v_mixup( 48) xor (v_mixup( 95) and not v_mixup(109)) xor v_mixup(104) xor v_mixup(110) xor v_mixin((i +  67) mod 128);
                    v_res( 49) := v_mixup( 49) xor (v_mixup( 96) and not v_mixup(110)) xor v_mixup(105) xor v_mixup(111) xor v_mixin((i +  55) mod 128);
                    v_res( 50) := v_mixup( 50) xor (v_mixup( 97) and not v_mixup(111)) xor v_mixup(106) xor v_mixup(112) xor v_mixin((i +  23) mod 128);
                    v_res( 51) := v_mixup( 51) xor (v_mixup( 98) and not v_mixup(112)) xor v_mixup(107) xor v_mixup(113) xor v_mixin((i +  12) mod 128);
                    v_res( 52) := v_mixup( 52) xor (v_mixup( 99) and not v_mixup(113)) xor v_mixup(108) xor v_mixup(114) xor v_mixin((i +  74) mod 128);
                    v_res( 53) := v_mixup( 53) xor (v_mixup(100) and not v_mixup(114)) xor v_mixup(109) xor v_mixup(115) xor v_mixin((i +  47) mod 128);
                    v_res( 54) := v_mixup( 54) xor (v_mixup(101) and not v_mixup(115)) xor v_mixup(110) xor v_mixup(116) xor v_mixin((i + 105) mod 128);
                    v_res( 55) := v_mixup( 55) xor (v_mixup(102) and not v_mixup(116)) xor v_mixup(111) xor v_mixup(117) xor v_mixin((i +  90) mod 128);
                    v_res( 56) := v_mixup( 56) xor (v_mixup(103) and not v_mixup(117)) xor v_mixup(112) xor v_mixup(118) xor v_mixin((i +  94) mod 128);
                    v_res( 57) := v_mixup( 57) xor (v_mixup(104) and not v_mixup(118)) xor v_mixup(113) xor v_mixup(119) xor v_mixin((i +  71) mod 128);
                    v_res( 58) := v_mixup( 58) xor (v_mixup(105) and not v_mixup(119)) xor v_mixup(114) xor v_mixup(120) xor v_mixin((i + 122) mod 128);
                    v_res( 59) := v_mixup( 59) xor (v_mixup(106) and not v_mixup(120)) xor v_mixup(115) xor v_mixup(121) xor v_mixin((i +  57) mod 128);
                    v_res( 60) := v_mixup( 60) xor (v_mixup(107) and not v_mixup(121)) xor v_mixup(116) xor v_mixup(122) xor v_mixin((i +  31) mod 128);
                    v_res( 61) := v_mixup( 61) xor (v_mixup(108) and not v_mixup(122)) xor v_mixup(117) xor v_mixup(123) xor v_mixin((i +  88) mod 128);
                    v_res( 62) := v_mixup( 62) xor (v_mixup(109) and not v_mixup(123)) xor v_mixup(118) xor v_mixup(124) xor v_mixin((i +   5) mod 128);
                    v_res( 63) := v_mixup( 63) xor (v_mixup(110) and not v_mixup(124)) xor v_mixup(119) xor v_mixup(125) xor v_mixin((i +  38) mod 128);
                    r_state_y(128 * i + 127 downto 128 * i) <= v_res & v_state_y(128 * i + 127 downto 128 * i + 64);
                end loop;
                
            end if;
        end if;
    end process;
    
end rtl;

