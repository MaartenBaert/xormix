-- Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
-- Available under the MIT License - see LICENSE.txt for details.

-- This file was generated by `generate_vhdl.py`.
-- Revision: 1

library ieee;
use ieee.std_logic_1164.all;

entity xormix64 is
    generic (
        streams : integer range 1 to 64 := 1
    );
    port (
        
        -- clock and synchronous reset
        clk    : in std_logic;
        rst    : in std_logic;
        
        -- configuration
        seed_x : in std_logic_vector(63 downto 0);
        seed_y : in std_logic_vector(64 * streams - 1 downto 0);
        
        -- random number generator
        enable : in std_logic;
        result : out std_logic_vector(64 * streams - 1 downto 0)
        
    );
end xormix64;

architecture rtl of xormix64 is
    
    type salts_t is array(0 to 63) of std_logic_vector(63 downto 0);
    constant salts : salts_t := (
        x"6c1f4cf86b670928", x"254b7cacdf1f7f73", x"9384f7a0b1b8600e", x"6402b3d837dfb664",
        x"7cb8aabfdc88b651", x"b89b5f5e1de22367", x"5def7160d6d4e4b9", x"8d2ef95b68e2110b",
        x"ffc0742fc5f3dbe3", x"87ce80324751b6e0", x"147610fcd384ae2a", x"bb625e1c429581e7",
        x"42c3fc05de25f0c0", x"db6752d26b3e7d9a", x"3edd68a5eb6ba2b1", x"63600f8ae4c7a36a",
        x"a8b436b35f0594b6", x"e7740ee396e0303c", x"4711b906c747cf69", x"2bd0973542881c68",
        x"9819f173380f1778", x"05fa834a446f5780", x"3aca5c28507a9812", x"3f8fae1df7b5284f",
        x"0fca61766c25a956", x"344a280b81b3dc59", x"9ae49767ed2aac9d", x"136354a988e7dc44",
        x"a47463136a589763", x"cca5d6d4ad8ff5e6", x"3e2a049598688d41", x"d79394eb53e8e614",
        x"3bebfb323f75041e", x"635aa20bf255c061", x"6026a67855446ab6", x"6f801ac1a01937d3",
        x"282dcf755931c792", x"42a866fb536b5c24", x"fc666ffe8b3ee689", x"a2e9693598d4d120",
        x"68d7594964f92460", x"adbcae73ac34dd49", x"993e260d3c6f44bc", x"5c72e28f77c7ab3d",
        x"6863f70a8cc13391", x"b3bc2c1931d5afe6", x"590494397519cd48", x"77ecc3481691cd65",
        x"1388ee338164ea29", x"2ff27333a309bbbc", x"eaebc14b790da4b9", x"61c2af10615a09fb",
        x"a35d4d739948bace", x"dda19468d60247e6", x"cf1f611a8269bc91", x"0adeb7af980adf73",
        x"14eccb6a88a0129e", x"71aaacdba83328de", x"135e1971c5db62b7", x"c5041c150065d8fd",
        x"42a68068988aff0c", x"f811709d805968db", x"e3bd59c3b7844bc4", x"e9602cb6280a6c70"
    );
    
    signal r_state_x : std_logic_vector(63 downto 0);
    signal r_state_y : std_logic_vector(64 * streams - 1 downto 0);
    
begin
    
    result <= r_state_y;
    
    process (clk)
        
        variable v_state_y : std_logic_vector(64 * streams - 1 downto 0);
        
        variable v_mixin : std_logic_vector(63 downto 0);
        variable v_mixup : std_logic_vector(63 downto 0);
        variable v_res : std_logic_vector(31 downto 0);
        
    begin
        if rising_edge(clk) then
            if rst = '1' then
                
                r_state_x <= seed_x;
                r_state_y <= seed_y;
                
            elsif enable = '1' then
                
                r_state_x( 0) <= r_state_x(56) xor r_state_x(40) xor r_state_x(59) xor r_state_x( 0) xor r_state_x(27);
                r_state_x( 1) <= r_state_x(49) xor r_state_x(48) xor r_state_x( 4) xor r_state_x(39) xor r_state_x(10) xor r_state_x(31);
                r_state_x( 2) <= r_state_x(15) xor r_state_x(35) xor r_state_x(32) xor r_state_x( 7) xor r_state_x(23);
                r_state_x( 3) <= r_state_x(14) xor r_state_x( 3) xor r_state_x(37) xor r_state_x(49) xor r_state_x(28) xor r_state_x(61);
                r_state_x( 4) <= r_state_x(48) xor r_state_x(18) xor r_state_x(59) xor r_state_x(29) xor r_state_x(25);
                r_state_x( 5) <= r_state_x( 1) xor r_state_x(44) xor r_state_x(18) xor r_state_x(19) xor r_state_x( 6) xor r_state_x( 2);
                r_state_x( 6) <= r_state_x(41) xor r_state_x(39) xor r_state_x(15) xor r_state_x(14) xor r_state_x(33);
                r_state_x( 7) <= r_state_x(59) xor r_state_x(40) xor r_state_x(32) xor r_state_x(27) xor r_state_x(63) xor r_state_x(50);
                r_state_x( 8) <= r_state_x(10) xor r_state_x(37) xor r_state_x(17) xor r_state_x( 8) xor r_state_x(21);
                r_state_x( 9) <= r_state_x(47) xor r_state_x(30) xor r_state_x(11) xor r_state_x(25) xor r_state_x(16) xor r_state_x(58);
                r_state_x(10) <= r_state_x(36) xor r_state_x(60) xor r_state_x(58) xor r_state_x(23) xor r_state_x(25);
                r_state_x(11) <= r_state_x(47) xor r_state_x(21) xor r_state_x(46) xor r_state_x( 5) xor r_state_x(29) xor r_state_x(32);
                r_state_x(12) <= r_state_x( 7) xor r_state_x(63) xor r_state_x(44) xor r_state_x(19) xor r_state_x(60);
                r_state_x(13) <= r_state_x(22) xor r_state_x(52) xor r_state_x(49) xor r_state_x(18) xor r_state_x(15) xor r_state_x( 3);
                r_state_x(14) <= r_state_x(32) xor r_state_x(46) xor r_state_x( 5) xor r_state_x( 6) xor r_state_x(31);
                r_state_x(15) <= r_state_x(42) xor r_state_x(33) xor r_state_x(16) xor r_state_x( 1) xor r_state_x(21) xor r_state_x( 6);
                r_state_x(16) <= r_state_x(34) xor r_state_x(11) xor r_state_x(18) xor r_state_x(55) xor r_state_x(12);
                r_state_x(17) <= r_state_x(41) xor r_state_x(43) xor r_state_x(10) xor r_state_x(47) xor r_state_x(57) xor r_state_x(28);
                r_state_x(18) <= r_state_x(31) xor r_state_x(38) xor r_state_x(13) xor r_state_x(32) xor r_state_x(48);
                r_state_x(19) <= r_state_x( 8) xor r_state_x( 9) xor r_state_x(36) xor r_state_x(62) xor r_state_x( 1) xor r_state_x(42);
                r_state_x(20) <= r_state_x(45) xor r_state_x( 3) xor r_state_x(57) xor r_state_x( 4) xor r_state_x(59);
                r_state_x(21) <= r_state_x(34) xor r_state_x(27) xor r_state_x(48) xor r_state_x(39) xor r_state_x(41) xor r_state_x(12);
                r_state_x(22) <= r_state_x(40) xor r_state_x(17) xor r_state_x(36) xor r_state_x(54) xor r_state_x(62);
                r_state_x(23) <= r_state_x(13) xor r_state_x( 9) xor r_state_x(45) xor r_state_x(25) xor r_state_x(28) xor r_state_x(42);
                r_state_x(24) <= r_state_x(21) xor r_state_x(17) xor r_state_x(54) xor r_state_x(60) xor r_state_x( 0);
                r_state_x(25) <= r_state_x( 8) xor r_state_x(48) xor r_state_x(47) xor r_state_x(40) xor r_state_x( 4) xor r_state_x(19);
                r_state_x(26) <= r_state_x(22) xor r_state_x(25) xor r_state_x(42) xor r_state_x(37) xor r_state_x(32);
                r_state_x(27) <= r_state_x( 6) xor r_state_x(38) xor r_state_x(26) xor r_state_x(50) xor r_state_x(49) xor r_state_x(41);
                r_state_x(28) <= r_state_x(26) xor r_state_x(51) xor r_state_x(62) xor r_state_x(24) xor r_state_x(15);
                r_state_x(29) <= r_state_x(31) xor r_state_x( 6) xor r_state_x(54) xor r_state_x(56) xor r_state_x(58) xor r_state_x(29);
                r_state_x(30) <= r_state_x(20) xor r_state_x(63) xor r_state_x( 2) xor r_state_x(22) xor r_state_x( 9);
                r_state_x(31) <= r_state_x( 5) xor r_state_x(14) xor r_state_x(42) xor r_state_x(56) xor r_state_x(12) xor r_state_x(15);
                r_state_x(32) <= r_state_x( 8) xor r_state_x(20) xor r_state_x(51) xor r_state_x(12) xor r_state_x(53);
                r_state_x(33) <= r_state_x(52) xor r_state_x(43) xor r_state_x( 0) xor r_state_x(11) xor r_state_x(46) xor r_state_x(23);
                r_state_x(34) <= r_state_x(12) xor r_state_x(20) xor r_state_x(38) xor r_state_x(16) xor r_state_x(44);
                r_state_x(35) <= r_state_x(28) xor r_state_x( 3) xor r_state_x(59) xor r_state_x(53) xor r_state_x(38) xor r_state_x(21);
                r_state_x(36) <= r_state_x(10) xor r_state_x(56) xor r_state_x(30) xor r_state_x(57) xor r_state_x(38);
                r_state_x(37) <= r_state_x(47) xor r_state_x(50) xor r_state_x( 6) xor r_state_x(54) xor r_state_x( 4) xor r_state_x(49);
                r_state_x(38) <= r_state_x(22) xor r_state_x(36) xor r_state_x( 7) xor r_state_x(45) xor r_state_x(37);
                r_state_x(39) <= r_state_x(46) xor r_state_x(21) xor r_state_x(26) xor r_state_x(55) xor r_state_x(58) xor r_state_x(35);
                r_state_x(40) <= r_state_x(14) xor r_state_x(26) xor r_state_x(34) xor r_state_x(33) xor r_state_x(17);
                r_state_x(41) <= r_state_x(43) xor r_state_x(50) xor r_state_x(55) xor r_state_x(58) xor r_state_x( 2) xor r_state_x( 1);
                r_state_x(42) <= r_state_x(55) xor r_state_x(57) xor r_state_x(33) xor r_state_x(49) xor r_state_x(51);
                r_state_x(43) <= r_state_x(47) xor r_state_x(26) xor r_state_x(22) xor r_state_x( 0) xor r_state_x(35) xor r_state_x(10);
                r_state_x(44) <= r_state_x(30) xor r_state_x(39) xor r_state_x(56) xor r_state_x(57) xor r_state_x( 7);
                r_state_x(45) <= r_state_x(53) xor r_state_x(24) xor r_state_x(52) xor r_state_x(12) xor r_state_x(44) xor r_state_x(36);
                r_state_x(46) <= r_state_x( 5) xor r_state_x(58) xor r_state_x(52) xor r_state_x( 9) xor r_state_x(20);
                r_state_x(47) <= r_state_x( 7) xor r_state_x(16) xor r_state_x(62) xor r_state_x(42) xor r_state_x(53) xor r_state_x(38);
                r_state_x(48) <= r_state_x(19) xor r_state_x(28) xor r_state_x( 4) xor r_state_x(27) xor r_state_x(13);
                r_state_x(49) <= r_state_x(26) xor r_state_x(46) xor r_state_x(20) xor r_state_x(27) xor r_state_x(17) xor r_state_x(29);
                r_state_x(50) <= r_state_x(28) xor r_state_x(40) xor r_state_x(14) xor r_state_x( 4) xor r_state_x(63);
                r_state_x(51) <= r_state_x( 2) xor r_state_x(24) xor r_state_x(61) xor r_state_x( 1) xor r_state_x( 5) xor r_state_x(56);
                r_state_x(52) <= r_state_x(45) xor r_state_x(23) xor r_state_x(44) xor r_state_x(18) xor r_state_x(39);
                r_state_x(53) <= r_state_x(45) xor r_state_x(40) xor r_state_x(29) xor r_state_x(61) xor r_state_x( 0) xor r_state_x(33);
                r_state_x(54) <= r_state_x( 7) xor r_state_x(50) xor r_state_x( 5) xor r_state_x(62) xor r_state_x(13);
                r_state_x(55) <= r_state_x(13) xor r_state_x(14) xor r_state_x(61) xor r_state_x(17) xor r_state_x(63) xor r_state_x(18);
                r_state_x(56) <= r_state_x(27) xor r_state_x(34) xor r_state_x( 9) xor r_state_x(24) xor r_state_x(11);
                r_state_x(57) <= r_state_x( 0) xor r_state_x(19) xor r_state_x(23) xor r_state_x( 7) xor r_state_x(59) xor r_state_x(25);
                r_state_x(58) <= r_state_x(51) xor r_state_x( 4) xor r_state_x(30) xor r_state_x(46) xor r_state_x(61);
                r_state_x(59) <= r_state_x(11) xor r_state_x(54) xor r_state_x(52) xor r_state_x(24) xor r_state_x(60) xor r_state_x(35);
                r_state_x(60) <= r_state_x(30) xor r_state_x(55) xor r_state_x(53) xor r_state_x(16) xor r_state_x(31);
                r_state_x(61) <= r_state_x( 3) xor r_state_x(33) xor r_state_x(36) xor r_state_x(58) xor r_state_x( 8) xor r_state_x(45);
                r_state_x(62) <= r_state_x(37) xor r_state_x(41) xor r_state_x(62) xor r_state_x(34) xor r_state_x(35);
                r_state_x(63) <= r_state_x(63) xor r_state_x(39) xor r_state_x(22) xor r_state_x(55) xor r_state_x(43) xor r_state_x(42);
                
                for i in 0 to streams - 1 loop
                    v_mixin := r_state_x xor salts(i);
                    v_mixup := r_state_y(64 * ((i + 1) mod streams) + 63 downto 64 * ((i + 1) mod streams));
                    v_res( 0) := v_mixup( 0) xor (v_mixup(28) and not v_mixup(31)) xor v_mixup(24) xor v_mixup(30) xor v_mixin((i + 39) mod 64);
                    v_res( 1) := v_mixup( 1) xor (v_mixup(29) and not v_mixup(32)) xor v_mixup(25) xor v_mixup(31) xor v_mixin((i + 11) mod 64);
                    v_res( 2) := v_mixup( 2) xor (v_mixup(30) and not v_mixup(33)) xor v_mixup(26) xor v_mixup(32) xor v_mixin((i + 51) mod 64);
                    v_res( 3) := v_mixup( 3) xor (v_mixup(31) and not v_mixup(34)) xor v_mixup(27) xor v_mixup(33) xor v_mixin((i + 53) mod 64);
                    v_res( 4) := v_mixup( 4) xor (v_mixup(32) and not v_mixup(35)) xor v_mixup(28) xor v_mixup(34) xor v_mixin((i + 61) mod 64);
                    v_res( 5) := v_mixup( 5) xor (v_mixup(33) and not v_mixup(36)) xor v_mixup(29) xor v_mixup(35) xor v_mixin((i + 31) mod 64);
                    v_res( 6) := v_mixup( 6) xor (v_mixup(34) and not v_mixup(37)) xor v_mixup(30) xor v_mixup(36) xor v_mixin((i + 29) mod 64);
                    v_res( 7) := v_mixup( 7) xor (v_mixup(35) and not v_mixup(38)) xor v_mixup(31) xor v_mixup(37) xor v_mixin((i + 27) mod 64);
                    v_res( 8) := v_mixup( 8) xor (v_mixup(36) and not v_mixup(39)) xor v_mixup(32) xor v_mixup(38) xor v_mixin((i + 12) mod 64);
                    v_res( 9) := v_mixup( 9) xor (v_mixup(37) and not v_mixup(40)) xor v_mixup(33) xor v_mixup(39) xor v_mixin((i + 57) mod 64);
                    v_res(10) := v_mixup(10) xor (v_mixup(38) and not v_mixup(41)) xor v_mixup(34) xor v_mixup(40) xor v_mixin((i + 43) mod 64);
                    v_res(11) := v_mixup(11) xor (v_mixup(39) and not v_mixup(42)) xor v_mixup(35) xor v_mixup(41) xor v_mixin((i + 56) mod 64);
                    v_res(12) := v_mixup(12) xor (v_mixup(40) and not v_mixup(43)) xor v_mixup(36) xor v_mixup(42) xor v_mixin((i + 42) mod 64);
                    v_res(13) := v_mixup(13) xor (v_mixup(41) and not v_mixup(44)) xor v_mixup(37) xor v_mixup(43) xor v_mixin((i +  2) mod 64);
                    v_res(14) := v_mixup(14) xor (v_mixup(42) and not v_mixup(45)) xor v_mixup(38) xor v_mixup(44) xor v_mixin((i + 26) mod 64);
                    v_res(15) := v_mixup(15) xor (v_mixup(43) and not v_mixup(46)) xor v_mixup(39) xor v_mixup(45) xor v_mixin((i + 37) mod 64);
                    v_res(16) := v_mixup(16) xor (v_mixup(44) and not v_mixup(47)) xor v_mixup(40) xor v_mixup(46) xor v_mixin((i + 41) mod 64);
                    v_res(17) := v_mixup(17) xor (v_mixup(45) and not v_mixup(48)) xor v_mixup(41) xor v_mixup(47) xor v_mixin((i + 10) mod 64);
                    v_res(18) := v_mixup(18) xor (v_mixup(46) and not v_mixup(49)) xor v_mixup(42) xor v_mixup(48) xor v_mixin((i + 20) mod 64);
                    v_res(19) := v_mixup(19) xor (v_mixup(47) and not v_mixup(50)) xor v_mixup(43) xor v_mixup(49) xor v_mixin((i + 44) mod 64);
                    v_res(20) := v_mixup(20) xor (v_mixup(48) and not v_mixup(51)) xor v_mixup(44) xor v_mixup(50) xor v_mixin((i +  7) mod 64);
                    v_res(21) := v_mixup(21) xor (v_mixup(49) and not v_mixup(52)) xor v_mixup(45) xor v_mixup(51) xor v_mixin((i + 28) mod 64);
                    v_res(22) := v_mixup(22) xor (v_mixup(50) and not v_mixup(53)) xor v_mixup(46) xor v_mixup(52) xor v_mixin((i + 13) mod 64);
                    v_res(23) := v_mixup(23) xor (v_mixup(51) and not v_mixup(54)) xor v_mixup(47) xor v_mixup(53) xor v_mixin((i +  9) mod 64);
                    v_res(24) := v_mixup(24) xor (v_mixup(52) and not v_mixup(55)) xor v_mixup(48) xor v_mixup(54) xor v_mixin((i + 25) mod 64);
                    v_res(25) := v_mixup(25) xor (v_mixup(53) and not v_mixup(56)) xor v_mixup(49) xor v_mixup(55) xor v_mixin((i + 32) mod 64);
                    v_res(26) := v_mixup(26) xor (v_mixup(54) and not v_mixup(57)) xor v_mixup(50) xor v_mixup(56) xor v_mixin((i + 52) mod 64);
                    v_res(27) := v_mixup(27) xor (v_mixup(55) and not v_mixup(58)) xor v_mixup(51) xor v_mixup(57) xor v_mixin((i + 14) mod 64);
                    v_res(28) := v_mixup(28) xor (v_mixup(56) and not v_mixup(59)) xor v_mixup(52) xor v_mixup(58) xor v_mixin((i + 19) mod 64);
                    v_res(29) := v_mixup(29) xor (v_mixup(57) and not v_mixup(60)) xor v_mixup(53) xor v_mixup(59) xor v_mixin((i + 60) mod 64);
                    v_res(30) := v_mixup(30) xor (v_mixup(58) and not v_mixup(61)) xor v_mixup(54) xor v_mixup(60) xor v_mixin((i + 48) mod 64);
                    v_res(31) := v_mixup(31) xor (v_mixup(59) and not v_mixup(62)) xor v_mixup(55) xor v_mixup(61) xor v_mixin((i + 49) mod 64);
                    v_state_y(64 * i + 63 downto 64 * i) := v_res & r_state_y(64 * i + 63 downto 64 * i + 32);
                end loop;
                
                for i in 0 to streams - 1 loop
                    v_mixin := r_state_x xor salts(i);
                    v_mixup := v_state_y(64 * ((i + 1) mod streams) + 63 downto 64 * ((i + 1) mod streams));
                    v_res( 0) := v_mixup( 0) xor (v_mixup(28) and not v_mixup(31)) xor v_mixup(24) xor v_mixup(30) xor v_mixin((i +  5) mod 64);
                    v_res( 1) := v_mixup( 1) xor (v_mixup(29) and not v_mixup(32)) xor v_mixup(25) xor v_mixup(31) xor v_mixin((i + 36) mod 64);
                    v_res( 2) := v_mixup( 2) xor (v_mixup(30) and not v_mixup(33)) xor v_mixup(26) xor v_mixup(32) xor v_mixin((i +  0) mod 64);
                    v_res( 3) := v_mixup( 3) xor (v_mixup(31) and not v_mixup(34)) xor v_mixup(27) xor v_mixup(33) xor v_mixin((i +  3) mod 64);
                    v_res( 4) := v_mixup( 4) xor (v_mixup(32) and not v_mixup(35)) xor v_mixup(28) xor v_mixup(34) xor v_mixin((i + 58) mod 64);
                    v_res( 5) := v_mixup( 5) xor (v_mixup(33) and not v_mixup(36)) xor v_mixup(29) xor v_mixup(35) xor v_mixin((i + 22) mod 64);
                    v_res( 6) := v_mixup( 6) xor (v_mixup(34) and not v_mixup(37)) xor v_mixup(30) xor v_mixup(36) xor v_mixin((i + 35) mod 64);
                    v_res( 7) := v_mixup( 7) xor (v_mixup(35) and not v_mixup(38)) xor v_mixup(31) xor v_mixup(37) xor v_mixin((i + 21) mod 64);
                    v_res( 8) := v_mixup( 8) xor (v_mixup(36) and not v_mixup(39)) xor v_mixup(32) xor v_mixup(38) xor v_mixin((i + 16) mod 64);
                    v_res( 9) := v_mixup( 9) xor (v_mixup(37) and not v_mixup(40)) xor v_mixup(33) xor v_mixup(39) xor v_mixin((i + 30) mod 64);
                    v_res(10) := v_mixup(10) xor (v_mixup(38) and not v_mixup(41)) xor v_mixup(34) xor v_mixup(40) xor v_mixin((i + 34) mod 64);
                    v_res(11) := v_mixup(11) xor (v_mixup(39) and not v_mixup(42)) xor v_mixup(35) xor v_mixup(41) xor v_mixin((i + 63) mod 64);
                    v_res(12) := v_mixup(12) xor (v_mixup(40) and not v_mixup(43)) xor v_mixup(36) xor v_mixup(42) xor v_mixin((i +  8) mod 64);
                    v_res(13) := v_mixup(13) xor (v_mixup(41) and not v_mixup(44)) xor v_mixup(37) xor v_mixup(43) xor v_mixin((i + 17) mod 64);
                    v_res(14) := v_mixup(14) xor (v_mixup(42) and not v_mixup(45)) xor v_mixup(38) xor v_mixup(44) xor v_mixin((i + 24) mod 64);
                    v_res(15) := v_mixup(15) xor (v_mixup(43) and not v_mixup(46)) xor v_mixup(39) xor v_mixup(45) xor v_mixin((i + 54) mod 64);
                    v_res(16) := v_mixup(16) xor (v_mixup(44) and not v_mixup(47)) xor v_mixup(40) xor v_mixup(46) xor v_mixin((i + 18) mod 64);
                    v_res(17) := v_mixup(17) xor (v_mixup(45) and not v_mixup(48)) xor v_mixup(41) xor v_mixup(47) xor v_mixin((i + 50) mod 64);
                    v_res(18) := v_mixup(18) xor (v_mixup(46) and not v_mixup(49)) xor v_mixup(42) xor v_mixup(48) xor v_mixin((i + 45) mod 64);
                    v_res(19) := v_mixup(19) xor (v_mixup(47) and not v_mixup(50)) xor v_mixup(43) xor v_mixup(49) xor v_mixin((i +  6) mod 64);
                    v_res(20) := v_mixup(20) xor (v_mixup(48) and not v_mixup(51)) xor v_mixup(44) xor v_mixup(50) xor v_mixin((i + 46) mod 64);
                    v_res(21) := v_mixup(21) xor (v_mixup(49) and not v_mixup(52)) xor v_mixup(45) xor v_mixup(51) xor v_mixin((i + 33) mod 64);
                    v_res(22) := v_mixup(22) xor (v_mixup(50) and not v_mixup(53)) xor v_mixup(46) xor v_mixup(52) xor v_mixin((i + 23) mod 64);
                    v_res(23) := v_mixup(23) xor (v_mixup(51) and not v_mixup(54)) xor v_mixup(47) xor v_mixup(53) xor v_mixin((i + 62) mod 64);
                    v_res(24) := v_mixup(24) xor (v_mixup(52) and not v_mixup(55)) xor v_mixup(48) xor v_mixup(54) xor v_mixin((i + 15) mod 64);
                    v_res(25) := v_mixup(25) xor (v_mixup(53) and not v_mixup(56)) xor v_mixup(49) xor v_mixup(55) xor v_mixin((i + 59) mod 64);
                    v_res(26) := v_mixup(26) xor (v_mixup(54) and not v_mixup(57)) xor v_mixup(50) xor v_mixup(56) xor v_mixin((i + 55) mod 64);
                    v_res(27) := v_mixup(27) xor (v_mixup(55) and not v_mixup(58)) xor v_mixup(51) xor v_mixup(57) xor v_mixin((i + 38) mod 64);
                    v_res(28) := v_mixup(28) xor (v_mixup(56) and not v_mixup(59)) xor v_mixup(52) xor v_mixup(58) xor v_mixin((i + 40) mod 64);
                    v_res(29) := v_mixup(29) xor (v_mixup(57) and not v_mixup(60)) xor v_mixup(53) xor v_mixup(59) xor v_mixin((i +  1) mod 64);
                    v_res(30) := v_mixup(30) xor (v_mixup(58) and not v_mixup(61)) xor v_mixup(54) xor v_mixup(60) xor v_mixin((i +  4) mod 64);
                    v_res(31) := v_mixup(31) xor (v_mixup(59) and not v_mixup(62)) xor v_mixup(55) xor v_mixup(61) xor v_mixin((i + 47) mod 64);
                    r_state_y(64 * i + 63 downto 64 * i) <= v_res & v_state_y(64 * i + 63 downto 64 * i + 32);
                end loop;
                
            end if;
        end if;
    end process;
    
end rtl;

