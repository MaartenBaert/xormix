-- Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
-- Available under the MIT License - see LICENSE.txt for details.

-- This file was generated by `generate_vhdl.py`.

library ieee;
use ieee.std_logic_1164.all;

entity xormix16_tb is
end xormix16_tb;

architecture bhv of xormix16_tb is
    
    -- configuration
    constant streams : integer := 4;
    constant results : integer := 100;
    constant seed_x  : std_logic_vector(15 downto 0) :=
        x"2138";
    constant seed_y  : std_logic_vector(16 * streams - 1 downto 0) :=
        x"626e6b2fc22539a4";
    
    -- reference result
    type result_array_t is array(0 to results - 1) of std_logic_vector(16 * streams - 1 downto 0);
    signal ref_result : result_array_t := (
        x"626e6b2fc22539a4",
        x"c5dd4a17cf8c11a4",
        x"13efd11600b3eba4",
        x"72de7ddf43585969",
        x"e9d5bc8a8a52d1c8",
        x"4780b20e2d3a161e",
        x"714770aeac1cd90a",
        x"22421712e4ca5b7d",
        x"8ae28b30f53cfc30",
        x"c256c9f89ce257e3",
        x"3c913a3dc62fdb78",
        x"68078bfc26d788ab",
        x"fb1682d98d81ba03",
        x"a8afc4e18fdc4aa0",
        x"026d3be207e6a1a7",
        x"c3ac822cc513ed95",
        x"b5d5fba4f699f9d5",
        x"707927e3ff3cf1bd",
        x"98df7c103f5513b7",
        x"5950529b5161bfa0",
        x"b0b7e72e74776d2b",
        x"41d32c1a2cb8c854",
        x"495c2708f2721d2d",
        x"e0d6e2cca22f97c2",
        x"56a02447e600be10",
        x"59db631d4ef77878",
        x"5cd95bad69690c18",
        x"780048308c01c99b",
        x"ad6f89579929008a",
        x"673ee3f31a38b626",
        x"df9d11d80cfdcb75",
        x"24f44b9af314e9db",
        x"81345ec1c92de063",
        x"92ee7365b5179cea",
        x"0ea17942c5cc1eec",
        x"e3e86ffc1f31d3f2",
        x"2012dfa0c56867d6",
        x"fee9116710164202",
        x"f87b6931a33dbed0",
        x"abf0101b9e7d86b9",
        x"fd72cf1d40e90784",
        x"aef6680aade08d5b",
        x"04aab013982a2162",
        x"939eaddb42b0e734",
        x"b2c88f7aa9e1acb2",
        x"632eda2df46b0283",
        x"faaa3ad0f216393f",
        x"031e0bdf738986e8",
        x"dc7b221e92126902",
        x"53e398fdcf4e6b65",
        x"67c35f10d1cf5d69",
        x"9a12e3e7c0d55328",
        x"5a80b6d83aa59eb3",
        x"60ad0ae6268c6770",
        x"ba87f9e2915ae5bc",
        x"6c8979fc38e98694",
        x"9421941652a6cda8",
        x"b2a8b3dece3b8763",
        x"97d03d7c8bafde2f",
        x"26d4bfb45dbd0e11",
        x"db7f246485364308",
        x"d1985df738869340",
        x"ac44d9ca18d27668",
        x"f76598b684af4ea0",
        x"0a79d71746373130",
        x"4072efc44d26cf41",
        x"8d554b5ed6417913",
        x"f57fa2e929b614bf",
        x"371c0fac025f173b",
        x"2b4632ff3f69beb7",
        x"d26ccc4b235aedad",
        x"852893447f9f3b2a",
        x"04eb3fa55e5971ca",
        x"bbf6b6592a1e2915",
        x"e0f3ba869d6bc81d",
        x"c77cee334701a5b0",
        x"06148e3811ecf7c4",
        x"7f15cf94b1038588",
        x"83762e241835a71c",
        x"af743b077750ed4d",
        x"49d9a508e2831108",
        x"b6b37b0703447cfb",
        x"5ac183a1f96fd60d",
        x"22c0cfa8f7a7fca4",
        x"5aa8e982de642475",
        x"665bfbe1e093a90f",
        x"42db83f4301cac14",
        x"14c7d7b01497703a",
        x"f32948be79a25ce3",
        x"787d3c46ccb54e13",
        x"cb47331efc673fe9",
        x"df06bd68d9236b99",
        x"f507397b8b09ca32",
        x"cebef9993e6d35f5",
        x"65a54f1b9237edf8",
        x"28f33f0e79aa694c",
        x"1121365c556024aa",
        x"af2e6db99985923a",
        x"444cd0d9c9d9473f",
        x"2110f183c694a1cf"
    );
    
    -- DUT signals
    signal clk    : std_logic := '0';
    signal rst    : std_logic;
    signal enable : std_logic;
    signal result : std_logic_vector(16 * streams - 1 downto 0);
    
    -- flag to stop simulation
    signal run : boolean := true;
    
begin
    
    -- DUT
    inst_xormix : entity work.xormix16 generic map(
        streams => streams
    ) port map (
        clk    => clk,
        rst    => rst,
        seed_x => seed_x,
        seed_y => seed_y,
        enable => enable,
        result => result
    );
    
    -- clock process
    process
    begin
        while run loop
            clk <= '1';
            wait for 5 ns;
            clk <= '0';
            wait for 5 ns;
        end loop;
        wait;
    end process;
    
    -- input/output process
    process
        variable errors : natural := 0;
    begin
        wait until rising_edge(clk);
        rst <= '1';
        enable <= '0';
        wait until rising_edge(clk);
        rst <= '0';
        enable <= '1';
        for i in 0 to results - 1 loop
            wait until rising_edge(clk);
            if result /= ref_result(i) then
                report "Incorrect result for i=" & integer'image(i) severity warning;
                errors := errors + 1;
            end if;
        end loop;
        report "Test complete, number of errors: " & integer'image(errors) severity note;
        run <= false;
        wait;
    end process;
    
end bhv;

