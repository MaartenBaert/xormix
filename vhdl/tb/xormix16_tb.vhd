-- Copyright (c) 2020-2021 Maarten Baert <info@maartenbaert.be>
-- Available under the MIT License - see LICENSE.txt for details.

-- This file was generated by `generate_vhdl.py`.

library ieee;
use ieee.std_logic_1164.all;

entity xormix16_tb is
end xormix16_tb;

architecture bhv of xormix16_tb is
    
    -- configuration
    constant streams : integer := 4;
    constant results : integer := 100;
    constant seed_x  : std_logic_vector(15 downto 0) :=
        x"2138";
    constant seed_y  : std_logic_vector(16 * streams - 1 downto 0) :=
        x"626e6b2fc22539a4";
    
    -- reference result
    type result_array_t is array(0 to results - 1) of std_logic_vector(16 * streams - 1 downto 0);
    signal ref_result : result_array_t := (
        x"626e6b2fc22539a4",
        x"c5dd4a17cf8c11a4",
        x"2762db54f63e35c6",
        x"a4900829f70d5098",
        x"6a30758d38487807",
        x"b8c6a31a16eab1c2",
        x"ffbccb8e6fc7c26a",
        x"ba2f2b861af57daa",
        x"76b2e87382aae5e0",
        x"0aa8427a846126d6",
        x"12f0845930322701",
        x"1fdc4f9dd3735ea7",
        x"f72fbad55ce2a076",
        x"f11a77b9d918a03d",
        x"5b268caabdda8744",
        x"6ba645d03312d753",
        x"8705d9aca121dbe5",
        x"d4f42c9da069f5da",
        x"a912f546c593ecdd",
        x"fed41f0b05c03945",
        x"afca1d652d2fe0c9",
        x"fbe9227d76337329",
        x"0f128f59259317ef",
        x"f89eb8fb947a3e52",
        x"c41cbe81bd747e8e",
        x"3441a8b52d90d6ae",
        x"19f9e8c9f96ae95e",
        x"9aa01c0f9352e7d1",
        x"6842668cc61eba5c",
        x"8bb834fab0e1f733",
        x"143b4838c2e2193b",
        x"9204004d5af269c8",
        x"cef331211c051d24",
        x"f06569a869b4a918",
        x"9b074623255ec881",
        x"61efbcb2b0bde314",
        x"c5f6c9fcfc862e51",
        x"67bcc3d9ee685b9a",
        x"4ef609759fbaafba",
        x"85f472c0ab116786",
        x"d67cc6b9c9c50936",
        x"9e286cd025fca669",
        x"f4061091ed96c44b",
        x"d85b3c2f657e646e",
        x"16ec23d2d87d673b",
        x"f37a960f2e550644",
        x"b5666647b61a2235",
        x"16f1dbd8b18f9e5b",
        x"8d2aaf56c34442a7",
        x"266034617aab9bd2",
        x"2cf6ec11a0c938e1",
        x"cf34908db3483b67",
        x"511d86ed1e38801c",
        x"ef76db6565f6d63f",
        x"dfc75cc365d8fc45",
        x"6c7c00314852c580",
        x"e626892bbb0cdcbf",
        x"9a425d6a5a2067f7",
        x"69db7e9834094ead",
        x"75c23fc17ddaa3a8",
        x"83d489ee944b4354",
        x"53cdb26ac48e83a1",
        x"6fcbe01c56e48bac",
        x"330988989108e1a9",
        x"caf07a34d43b50c5",
        x"b3f80596cb4af430",
        x"7ff7d667f25ac2cc",
        x"beac2f95da8db45e",
        x"805c7a978811c5bb",
        x"df9a6f141b84a7ae",
        x"1948b6bd87d7c100",
        x"5f02a251355f6e45",
        x"976b1c51f47c114a",
        x"d09b2a545ce37d12",
        x"9c1c64e2512061f4",
        x"a57e5e49c03b518f",
        x"b01bfffa1de1264c",
        x"e8d22edf2898672e",
        x"c20351047a6447c7",
        x"e90202775ad783c4",
        x"bcce56d304ce423f",
        x"245c5b833635f2cc",
        x"57305a64ac1ae4c0",
        x"d8df25d328c621a4",
        x"29c3b9323ce4d0f5",
        x"3fb0ad12ba22b1b6",
        x"7df8182f25735f41",
        x"91178c67755ecb0c",
        x"438e7bc5b5f37504",
        x"d78788238f58ca95",
        x"94cf86dd58373717",
        x"bff32714ed83414d",
        x"27523fa868247f44",
        x"2c1676e60d3a1b76",
        x"9a35601212afe909",
        x"6352987350a71852",
        x"ea8f776b51c064de",
        x"08f50bc4028f8d83",
        x"eb2929cb008ee444",
        x"180ddc11f504cf72"
    );
    
    -- DUT signals
    signal clk    : std_logic := '0';
    signal rst    : std_logic;
    signal enable : std_logic;
    signal result : std_logic_vector(16 * streams - 1 downto 0);
    
    -- flag to stop simulation
    signal run : boolean := true;
    
begin
    
    -- DUT
    inst_xormix : entity work.xormix16 generic map(
        streams => streams
    ) port map (
        clk    => clk,
        rst    => rst,
        seed_x => seed_x,
        seed_y => seed_y,
        enable => enable,
        result => result
    );
    
    -- clock process
    process
    begin
        while run loop
            clk <= '1';
            wait for 5 ns;
            clk <= '0';
            wait for 5 ns;
        end loop;
        wait;
    end process;
    
    -- input/output process
    process
        variable errors : natural := 0;
    begin
        wait until rising_edge(clk);
        rst <= '1';
        enable <= '0';
        wait until rising_edge(clk);
        rst <= '0';
        enable <= '1';
        for i in 0 to results - 1 loop
            wait until rising_edge(clk);
            if result /= ref_result(i) then
                report "Incorrect result for i=" & integer'image(i) severity warning;
                errors := errors + 1;
            end if;
        end loop;
        report "Test complete, number of errors: " & integer'image(errors) severity note;
        run <= false;
        wait;
    end process;
    
end bhv;
